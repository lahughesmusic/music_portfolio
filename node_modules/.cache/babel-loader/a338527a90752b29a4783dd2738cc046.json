{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _vendorPropTypes = require('./vendor-prop-types');\n\nvar _vendorPropTypes2 = _interopRequireDefault(_vendorPropTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar AudioContext = typeof window === 'undefined' ? false : window.AudioContext || window.webkitAudioContext;\nvar audioContext = void 0;\n\nif (AudioContext) {\n  audioContext = new AudioContext();\n}\n\nvar HTML5 = function (_Component) {\n  _inherits(HTML5, _Component);\n\n  function HTML5() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, HTML5);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = HTML5.__proto__ || Object.getPrototypeOf(HTML5)).call.apply(_ref, [this].concat(args))), _this), _this._isLoading = function () {\n      _this.props.isLoading(true);\n    }, _this._isNotLoading = function () {\n      _this.props.isLoading(false);\n    }, _this._handleCanPlay = function () {\n      _this.props.onReady();\n    }, _this._handlePlay = function () {\n      _this.props.onPlay(true);\n\n      _this._isNotLoading();\n    }, _this._handlePause = function () {\n      _this.props.onPause(false);\n    }, _this._handleEnded = function () {\n      _this.props.onEnded(false);\n    }, _this._handleError = function (e) {\n      if (_this._playerStopped) {\n        _this._playerStopped = false;\n      } else {\n        _this.props.onError(e);\n\n        _this._isNotLoading();\n      }\n    }, _this._handleProgress = function (_ref2) {\n      var _ref2$target = _ref2.target,\n          buffered = _ref2$target.buffered,\n          duration = _ref2$target.duration;\n      var progress = 0;\n\n      if (duration > 0 && buffered.length) {\n        progress = buffered.end(buffered.length - 1) / duration;\n      }\n\n      _this.props.onProgress(progress);\n    }, _this._handleDuration = function (_ref3) {\n      var duration = _ref3.target.duration;\n\n      _this.props.onDuration(duration);\n    }, _this._handleTimeUpdate = function (_ref4) {\n      var currentTime = _ref4.target.currentTime;\n\n      _this.props.onTimeUpdate(currentTime);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(HTML5, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props$extraProps = this.props.extraProps,\n          connectSource = _props$extraProps.connectSource,\n          useAudioObject = _props$extraProps.useAudioObject;\n\n      if (this.props.vendor === 'audio') {\n        if (useAudioObject) {\n          this._createAudioObject();\n\n          this._bindAudioObjectEvents();\n        }\n\n        if (audioContext && connectSource) {\n          this._connectAudioContext();\n        }\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(lastProps) {\n      var _props$extraProps2 = this.props.extraProps,\n          connectSource = _props$extraProps2.connectSource,\n          useAudioObject = _props$extraProps2.useAudioObject;\n      var vendorChanged = this.props.vendor !== lastProps.vendor;\n      var sourceChanged = this.props.src !== lastProps.src;\n\n      if (useAudioObject) {\n        if (vendorChanged) {\n          this._createAudioObject();\n        } else if (sourceChanged) {\n          this._destroyAudioObject();\n\n          this._createAudioObject();\n        }\n\n        this._bindAudioObjectEvents();\n      }\n\n      if (this.props.vendor === 'audio' && audioContext && connectSource) {\n        if (vendorChanged) {\n          this._connectAudioContext();\n        } else if (sourceChanged) {\n          this._disconnectAudioContext();\n\n          this._connectAudioContext();\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _props$extraProps3 = this.props.extraProps,\n          connectSource = _props$extraProps3.connectSource,\n          useAudioObject = _props$extraProps3.useAudioObject;\n\n      if (audioContext && connectSource) {\n        this._disconnectAudioContext();\n      }\n\n      if (useAudioObject) {\n        this._destroyAudioObject();\n      }\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      if (audioContext && audioContext.state === 'suspended') {\n        audioContext.resume();\n      }\n\n      return this._player.play();\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this._player.pause();\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this._player.pause();\n\n      this._player.currentTime = 0;\n    }\n  }, {\n    key: 'seekTo',\n    value: function seekTo(currentTime) {\n      if (this._player.readyState > 0) {\n        this._player.currentTime = currentTime;\n      }\n    }\n  }, {\n    key: 'mute',\n    value: function mute(muted) {\n      var nextVolume = muted ? 0 : 1;\n      this._player.muted = muted;\n      this.setVolume(nextVolume);\n      this.props.onMute(muted);\n      this.props.onVolumeChange(nextVolume);\n    }\n  }, {\n    key: 'setVolume',\n    value: function setVolume(volume) {\n      if (this._gain) {\n        this._gain.gain.value = volume;\n      } else {\n        this._player.volume = volume;\n      }\n\n      this.props.onVolumeChange(volume);\n    }\n  }, {\n    key: '_createAudioObject',\n    value: function _createAudioObject() {\n      this._player = new Audio(this.props.src);\n    }\n  }, {\n    key: '_destroyAudioObject',\n    value: function _destroyAudioObject() {\n      this.stop();\n      this._player.src = 'about:blank';\n      this._playerStopped = true;\n    }\n  }, {\n    key: '_bindAudioObjectEvents',\n    value: function _bindAudioObjectEvents() {\n      var _this2 = this;\n\n      var _props$extraProps4 = this.props.extraProps,\n          connectSource = _props$extraProps4.connectSource,\n          useAudioObject = _props$extraProps4.useAudioObject,\n          playerProps = _objectWithoutProperties(_props$extraProps4, ['connectSource', 'useAudioObject']);\n\n      var playerEvents = this._playerEvents;\n      Object.keys(playerProps).forEach(function (key) {\n        _this2._player[key] = playerProps[key];\n      });\n      Object.keys(playerEvents).forEach(function (key) {\n        _this2._player[key.toLowerCase()] = playerEvents[key];\n      });\n    }\n  }, {\n    key: '_connectAudioContext',\n    value: function _connectAudioContext() {\n      var _props$extraProps5 = this.props.extraProps,\n          connectSource = _props$extraProps5.connectSource,\n          useAudioObject = _props$extraProps5.useAudioObject;\n\n      if (useAudioObject || !this._source) {\n        this._source = audioContext.createMediaElementSource(useAudioObject ? this.instance : this.node);\n      }\n\n      this._gain = audioContext.createGain();\n      connectSource(this._source, audioContext).connect(this._gain);\n\n      this._gain.connect(audioContext.destination);\n    }\n  }, {\n    key: '_disconnectAudioContext',\n    value: function _disconnectAudioContext() {\n      this._source.disconnect(0);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props = this.props,\n          vendor = _props.vendor,\n          src = _props.src,\n          _props$extraProps6 = _props.extraProps,\n          connectSource = _props$extraProps6.connectSource,\n          useAudioObject = _props$extraProps6.useAudioObject,\n          playerProps = _objectWithoutProperties(_props$extraProps6, ['connectSource', 'useAudioObject']);\n\n      return useAudioObject ? null : (0, _react.createElement)(vendor, _extends({\n        ref: function ref(c) {\n          return _this3._player = c;\n        },\n        src: src\n      }, playerProps, this._playerEvents));\n    }\n  }, {\n    key: 'instance',\n    get: function get() {\n      return this._player;\n    }\n  }, {\n    key: 'node',\n    get: function get() {\n      return (0, _reactDom.findDOMNode)(this._player);\n    }\n  }, {\n    key: '_playerEvents',\n    get: function get() {\n      return {\n        onCanPlay: this._handleCanPlay,\n        onPlay: this._handlePlay,\n        onPlaying: this._isNotLoading,\n        onPause: this._handlePause,\n        onEnded: this._handleEnded,\n        onWaiting: this._isLoading,\n        onError: this._handleError,\n        onProgress: this._handleProgress,\n        onLoadedMetadata: this._handleDuration,\n        onTimeUpdate: this._handleTimeUpdate\n      };\n    }\n  }]);\n\n  return HTML5;\n}(_react.Component);\n\nHTML5.propTypes = _extends({}, _vendorPropTypes2.default, {\n  useAudioObject: _propTypes2.default.bool\n});\nexports.default = HTML5;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}