{"ast":null,"code":"var _jsxFileName = \"/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Media/react-audio-player/js/components/VolumeBar.js\";\nimport $ from \"jquery\";\n\nvar React = require(\"react/addons\");\n\nvar classnames = require(\"classnames\");\n\nvar Button = require(\"react-bootstrap/Button\");\n\nvar Glyphicon = require(\"react-bootstrap/Glyphicon\");\n\nvar uniquleId = 0;\nmodule.exports = React.createClass({\n  displayName: \"exports\",\n  getInitialState: function () {\n    return {\n      hide: true\n    };\n  },\n  render: function () {\n    var percent = this.props.volume * 100;\n    var style = {\n      top: 100 - percent + \"%\"\n    };\n    var toggleIcon = this.props.volume == 0 ? \"volume-off\" : \"volume-up\";\n    var audioVolumeBarClasses = classnames({\n      \"audio-volume-bar\": true,\n      \"audio-volume-bar-hide\": this.state.hide\n    });\n    let audioVolumeBarContainerId = \"audioVolumeBarContainerId\" + ++uniquleId;\n    let toggleBtnId = \"toggleBtn\" + ++uniquleId;\n    return React.createElement(\"div\", {\n      id: audioVolumeBarContainerId,\n      ref: \"audioVolumeBarContainer\",\n      className: \"audio-volume-bar-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(Button, {\n      id: toggleBtnId,\n      ref: \"toggleButton\",\n      bsSize: \"small\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Glyphicon, {\n      glyph: toggleIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: audioVolumeBarClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"audio-volume-min-max\",\n      onClick: this.volumeToMax,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Glyphicon, {\n      glyph: \"volume-up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: \"audioVolumePercentContainer\",\n      className: \"audio-volume-percent-container\",\n      onClick: this.adjustVolumeTo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"audio-volume-percent\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"audio-volume-min-max\",\n      onClick: this.volumeToMin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Glyphicon, {\n      glyph: \"volume-off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }))));\n  },\n  toggle: function () {\n    // when bar open, do nothing if toggle btn press again\n    if (this.isToggleBtnPress) {\n      this.isToggleBtnPress = false;\n      return;\n    }\n\n    var hide = !this.state.hide;\n\n    if (hide) {\n      return;\n    }\n\n    this.setState({\n      hide: false\n    });\n    this.globalClickHandler = $(document).mousedown(function (e) {\n      var reactId = this.refs.audioVolumeBarContainer.props.id;\n      var toggleBtnReactId = this.refs.toggleButton.props.id;\n      node = e.target;\n\n      while (node != null) {\n        var nodeReactId = $(node).context.id;\n\n        if (reactId === nodeReactId) {\n          return;\n        } else if (toggleBtnReactId === nodeReactId) {\n          this.isToggleBtnPress = true;\n          break;\n        }\n\n        node = node.parentNode;\n      }\n\n      this.globalClickHandler.unbind();\n      this.globalClickHandler = null;\n      this.setState({\n        hide: true\n      });\n    }.bind(this));\n  },\n  adjustVolumeTo: function (e) {\n    var container = $(this.refs.audioVolumePercentContainer.getDOMNode());\n    var containerStartY = container.offset().top;\n    var percent = (e.clientY - containerStartY) / container.height();\n    percent = 1 - percent;\n    this.props.adjustVolumeTo(percent);\n  },\n  volumeToMax: function () {\n    this.props.adjustVolumeTo(1);\n  },\n  volumeToMin: function () {\n    this.props.adjustVolumeTo(0);\n  }\n});","map":{"version":3,"sources":["/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Media/react-audio-player/js/components/VolumeBar.js"],"names":["$","React","require","classnames","Button","Glyphicon","uniquleId","module","exports","createClass","getInitialState","hide","render","percent","props","volume","style","top","toggleIcon","audioVolumeBarClasses","state","audioVolumeBarContainerId","toggleBtnId","toggle","volumeToMax","adjustVolumeTo","volumeToMin","isToggleBtnPress","setState","globalClickHandler","document","mousedown","e","reactId","refs","audioVolumeBarContainer","id","toggleBtnReactId","toggleButton","node","target","nodeReactId","context","parentNode","unbind","bind","container","audioVolumePercentContainer","getDOMNode","containerStartY","offset","clientY","height"],"mappings":"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","sourcesContent":["import $ from \"jquery\";\nvar React = require(\"react/addons\");\nvar classnames = require(\"classnames\");\nvar Button = require(\"react-bootstrap/Button\");\nvar Glyphicon = require(\"react-bootstrap/Glyphicon\");\n\nvar uniquleId = 0;\n\nmodule.exports = React.createClass({\n  getInitialState: function() {\n    return { hide: true };\n  },\n\n  render: function() {\n    var percent = this.props.volume * 100;\n    var style = { top: 100 - percent + \"%\" };\n    var toggleIcon = this.props.volume == 0 ? \"volume-off\" : \"volume-up\";\n\n    var audioVolumeBarClasses = classnames({\n      \"audio-volume-bar\": true,\n      \"audio-volume-bar-hide\": this.state.hide\n    });\n\n    let audioVolumeBarContainerId = \"audioVolumeBarContainerId\" + ++uniquleId;\n    let toggleBtnId = \"toggleBtn\" + ++uniquleId;\n\n    return (\n      <div\n        id={audioVolumeBarContainerId}\n        ref=\"audioVolumeBarContainer\"\n        className=\"audio-volume-bar-container\"\n      >\n        <Button\n          id={toggleBtnId}\n          ref=\"toggleButton\"\n          bsSize=\"small\"\n          onClick={this.toggle}\n        >\n          <Glyphicon glyph={toggleIcon} />\n        </Button>\n        <div className={audioVolumeBarClasses}>\n          <div className=\"audio-volume-min-max\" onClick={this.volumeToMax}>\n            <Glyphicon glyph=\"volume-up\" />\n          </div>\n          <div\n            ref=\"audioVolumePercentContainer\"\n            className=\"audio-volume-percent-container\"\n            onClick={this.adjustVolumeTo}\n          >\n            <div className=\"audio-volume-percent\" style={style}></div>\n          </div>\n          <div className=\"audio-volume-min-max\" onClick={this.volumeToMin}>\n            <Glyphicon glyph=\"volume-off\" />\n          </div>\n        </div>\n      </div>\n    );\n  },\n\n  toggle: function() {\n    // when bar open, do nothing if toggle btn press again\n    if (this.isToggleBtnPress) {\n      this.isToggleBtnPress = false;\n      return;\n    }\n\n    var hide = !this.state.hide;\n    if (hide) {\n      return;\n    }\n\n    this.setState({ hide: false });\n    this.globalClickHandler = $(document).mousedown(\n      function(e) {\n        var reactId = this.refs.audioVolumeBarContainer.props.id;\n        var toggleBtnReactId = this.refs.toggleButton.props.id;\n        node = e.target;\n        while (node != null) {\n          var nodeReactId = $(node).context.id;\n          if (reactId === nodeReactId) {\n            return;\n          } else if (toggleBtnReactId === nodeReactId) {\n            this.isToggleBtnPress = true;\n            break;\n          }\n          node = node.parentNode;\n        }\n        this.globalClickHandler.unbind();\n        this.globalClickHandler = null;\n        this.setState({ hide: true });\n      }.bind(this)\n    );\n  },\n\n  adjustVolumeTo: function(e) {\n    var container = $(this.refs.audioVolumePercentContainer.getDOMNode());\n    var containerStartY = container.offset().top;\n    var percent = (e.clientY - containerStartY) / container.height();\n    percent = 1 - percent;\n    this.props.adjustVolumeTo(percent);\n  },\n\n  volumeToMax: function() {\n    this.props.adjustVolumeTo(1);\n  },\n\n  volumeToMin: function() {\n    this.props.adjustVolumeTo(0);\n  }\n});\n"]},"metadata":{},"sourceType":"module"}