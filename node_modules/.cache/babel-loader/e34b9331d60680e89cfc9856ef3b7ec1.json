{"ast":null,"code":"var _jsxFileName = \"/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Media/react-audio-player/js/components/VolumeBar.js\";\n\nvar React = require('react/addons');\n\nvar classnames = require('classnames');\n\nvar Button = require('react-bootstrap/Button');\n\nvar Glyphicon = require('react-bootstrap/Glyphicon');\n\nvar uniquleId = 0;\nmodule.exports = React.createClass({\n  displayName: \"exports\",\n  getInitialState: function () {\n    return {\n      hide: true\n    };\n  },\n  render: function () {\n    var percent = this.props.volume * 100;\n    var style = {\n      top: 100 - percent + \"%\"\n    };\n    var toggleIcon = this.props.volume == 0 ? \"volume-off\" : \"volume-up\";\n    var audioVolumeBarClasses = classnames({\n      'audio-volume-bar': true,\n      'audio-volume-bar-hide': this.state.hide\n    });\n    audioVolumeBarContainerId = \"audioVolumeBarContainerId\" + ++uniquleId;\n    toggleBtnId = \"toggleBtn\" + ++uniquleId;\n    return React.createElement(\"div\", {\n      id: audioVolumeBarContainerId,\n      ref: \"audioVolumeBarContainer\",\n      className: \"audio-volume-bar-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(Button, {\n      id: toggleBtnId,\n      ref: \"toggleButton\",\n      bsSize: \"small\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(Glyphicon, {\n      glyph: toggleIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: audioVolumeBarClasses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"audio-volume-min-max\",\n      onClick: this.volumeToMax,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Glyphicon, {\n      glyph: \"volume-up\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: \"audioVolumePercentContainer\",\n      className: \"audio-volume-percent-container\",\n      onClick: this.adjustVolumeTo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"audio-volume-percent\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"audio-volume-min-max\",\n      onClick: this.volumeToMin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Glyphicon, {\n      glyph: \"volume-off\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }))));\n  },\n  toggle: function () {\n    // when bar open, do nothing if toggle btn press again\n    if (this.isToggleBtnPress) {\n      this.isToggleBtnPress = false;\n      return;\n    }\n\n    var hide = !this.state.hide;\n\n    if (hide) {\n      return;\n    }\n\n    this.setState({\n      hide: false\n    });\n    this.globalClickHandler = $(document).mousedown(function (e) {\n      var reactId = this.refs.audioVolumeBarContainer.props.id;\n      var toggleBtnReactId = this.refs.toggleButton.props.id;\n      node = e.target;\n\n      while (node != null) {\n        var nodeReactId = $(node).context.id;\n\n        if (reactId === nodeReactId) {\n          return;\n        } else if (toggleBtnReactId === nodeReactId) {\n          this.isToggleBtnPress = true;\n          break;\n        }\n\n        node = node.parentNode;\n      }\n\n      this.globalClickHandler.unbind();\n      this.globalClickHandler = null;\n      this.setState({\n        hide: true\n      });\n    }.bind(this));\n  },\n  adjustVolumeTo: function (e) {\n    var container = $(this.refs.audioVolumePercentContainer.getDOMNode());\n    var containerStartY = container.offset().top;\n    var percent = (e.clientY - containerStartY) / container.height();\n    percent = 1 - percent;\n    this.props.adjustVolumeTo(percent);\n  },\n  volumeToMax: function () {\n    this.props.adjustVolumeTo(1);\n  },\n  volumeToMin: function () {\n    this.props.adjustVolumeTo(0);\n  }\n});","map":{"version":3,"sources":["/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Media/react-audio-player/js/components/VolumeBar.js"],"names":["React","require","classnames","Button","Glyphicon","uniquleId","module","exports","createClass","getInitialState","hide","render","percent","props","volume","style","top","toggleIcon","audioVolumeBarClasses","state","audioVolumeBarContainerId","toggleBtnId","toggle","volumeToMax","adjustVolumeTo","volumeToMin","isToggleBtnPress","setState","globalClickHandler","$","document","mousedown","e","reactId","refs","audioVolumeBarContainer","id","toggleBtnReactId","toggleButton","node","target","nodeReactId","context","parentNode","unbind","bind","container","audioVolumePercentContainer","getDOMNode","containerStartY","offset","clientY","height"],"mappings":"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","sourcesContent":["var React = require('react/addons');\nvar classnames = require('classnames');\nvar Button = require('react-bootstrap/Button');\nvar Glyphicon = require('react-bootstrap/Glyphicon');\n\nvar uniquleId = 0\n\nmodule.exports = React.createClass({\n\t\n\tgetInitialState: function() {\n\t\treturn { hide: true };\n\t},\n\n\trender: function() {\n\t\t\n\t\tvar percent = this.props.volume * 100;\n\t\tvar style = {top: (100 - percent) + \"%\"};\n\t\tvar toggleIcon = this.props.volume == 0 ? \"volume-off\" : \"volume-up\";\n\n\t\tvar audioVolumeBarClasses = classnames({\n\t\t\t'audio-volume-bar': true,\n  \t\t'audio-volume-bar-hide': this.state.hide\n\t\t});\n\n\t\taudioVolumeBarContainerId = \"audioVolumeBarContainerId\" + ++uniquleId;\n\t\ttoggleBtnId = \"toggleBtn\" + ++uniquleId;\n\n\t\treturn (\n\t\t\t<div id={audioVolumeBarContainerId} ref=\"audioVolumeBarContainer\" className=\"audio-volume-bar-container\">\n\t\t\t\t<Button id={toggleBtnId} ref=\"toggleButton\" bsSize=\"small\" onClick={this.toggle}>\n\t\t\t\t\t<Glyphicon glyph={toggleIcon}/>\n\t\t\t\t</Button>\n\t\t\t\t<div className={audioVolumeBarClasses}>\n\t\t\t\t\t<div className=\"audio-volume-min-max\" onClick={this.volumeToMax}>\n\t\t\t\t\t\t<Glyphicon glyph=\"volume-up\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div ref=\"audioVolumePercentContainer\" className=\"audio-volume-percent-container\" onClick={this.adjustVolumeTo}>\n\t\t\t\t\t\t<div className=\"audio-volume-percent\" style={style}></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"audio-volume-min-max\" onClick={this.volumeToMin}>\n\t\t\t\t\t\t<Glyphicon glyph=\"volume-off\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\t\n\t\t\t</div>\n\t\t);\n\t},\n\n\ttoggle: function() {\n\n\t\t// when bar open, do nothing if toggle btn press again\n\t\tif (this.isToggleBtnPress) {\n\t\t\tthis.isToggleBtnPress = false;\n\t\t\treturn;\n\t\t}\n\n\t\tvar hide = !this.state.hide;\n\t\tif (hide) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState({ hide: false });\n\t\tthis.globalClickHandler = $(document).mousedown(function(e) {\n\t\t\tvar reactId = this.refs.audioVolumeBarContainer.props.id;\n\t\t\tvar toggleBtnReactId = this.refs.toggleButton.props.id;\n\t\t\tnode = e.target;\n\t\t\twhile(node != null) {\n\t\t\t\tvar nodeReactId =  $(node).context.id;\n\t\t\t\tif (reactId === nodeReactId) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (toggleBtnReactId === nodeReactId) {\n\t\t\t\t\tthis.isToggleBtnPress = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnode = node.parentNode;\n\t\t\t}\n\t\t\tthis.globalClickHandler.unbind();\n\t\t\tthis.globalClickHandler = null;\n\t\t\tthis.setState({ hide: true });\n\t\t}.bind(this));\n\t\t\n\t},\n\n\tadjustVolumeTo: function(e) {\n\t\tvar container = $(this.refs.audioVolumePercentContainer.getDOMNode());\n\t\tvar containerStartY = container.offset().top;\n\t\tvar percent = (e.clientY - containerStartY) / container.height();\t\n\t\tpercent = 1 - percent;\n\t\tthis.props.adjustVolumeTo(percent);\n\t},\n\n\tvolumeToMax: function() {\n\t\tthis.props.adjustVolumeTo(1);\n\t},\n\n\tvolumeToMin: function() {\n\t\tthis.props.adjustVolumeTo(0);\n\t}\n\n});"]},"metadata":{},"sourceType":"module"}