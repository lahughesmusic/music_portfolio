{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _contextTypes = require('./context-types');\n\nvar _contextTypes2 = _interopRequireDefault(_contextTypes);\n\nvar _requestFullscreen = require('./utils/request-fullscreen');\n\nvar _requestFullscreen2 = _interopRequireDefault(_requestFullscreen);\n\nvar _exitFullscreen = require('./utils/exit-fullscreen');\n\nvar _exitFullscreen2 = _interopRequireDefault(_exitFullscreen);\n\nvar _fullscreenChange = require('./utils/fullscreen-change');\n\nvar _fullscreenChange2 = _interopRequireDefault(_fullscreenChange);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MEDIA_EVENTS = {\n  onPlay: 'isPlaying',\n  onPause: 'isPlaying',\n  onDuration: 'duration',\n  onProgress: 'progress',\n  onTimeUpdate: 'currentTime',\n  onMute: 'isMuted',\n  onVolumeChange: 'volume',\n  onError: null\n};\nvar MEDIA_EVENTS_KEYS = Object.keys(MEDIA_EVENTS);\n\nvar Media = function (_Component) {\n  _inherits(Media, _Component);\n\n  function Media() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Media);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Media.__proto__ || Object.getPrototypeOf(Media)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      currentTime: 0,\n      progress: 0,\n      duration: 0.1,\n      volume: 1,\n      isLoading: true,\n      isPlaying: false,\n      isMuted: false,\n      isFullscreen: false\n    }, _this._isMounted = false, _this._playerProps = {}, _this._lastVolume = 0, _this._setPlayer = function (component) {\n      _this._player = component;\n    }, _this._setPlayerProps = function (props) {\n      _this._playerProps = props;\n    }, _this._setPlayerState = function (state) {\n      _this.setState(state);\n    }, _this.play = function () {\n      return _this._player.play();\n    }, _this.pause = function () {\n      _this._player.pause();\n    }, _this.playPause = function () {\n      if (!_this.state.isPlaying) {\n        return _this.play();\n      } else {\n        _this.pause();\n      }\n    }, _this.stop = function () {\n      _this._player.stop();\n    }, _this.seekTo = function (currentTime) {\n      _this._player.seekTo(currentTime);\n\n      _this.setState({\n        currentTime: currentTime\n      });\n    }, _this.skipTime = function (amount) {\n      var _this$state = _this.state,\n          currentTime = _this$state.currentTime,\n          duration = _this$state.duration;\n      var newTime = currentTime + amount;\n\n      if (newTime < 0) {\n        newTime = 0;\n      } else if (newTime > duration) {\n        newTime = duration;\n      }\n\n      _this.seekTo(newTime);\n    }, _this.mute = function (isMuted) {\n      if (isMuted) {\n        _this._lastVolume = _this.state.volume;\n\n        _this._player.setVolume(0);\n      } else {\n        var volume = _this._lastVolume > 0 ? _this._lastVolume : 0.1;\n\n        _this._player.setVolume(volume);\n      }\n\n      _this._player.mute(isMuted);\n    }, _this.muteUnmute = function () {\n      _this.mute(!_this.state.isMuted);\n    }, _this.setVolume = function (volume) {\n      var isMuted = volume <= 0;\n\n      if (isMuted !== _this.state.isMuted) {\n        _this.mute(isMuted);\n      } else {\n        _this._lastVolume = volume;\n      }\n\n      _this._player.setVolume(volume);\n    }, _this.addVolume = function (amount) {\n      var newVolume = _this.state.volume + amount * 0.01;\n\n      if (newVolume < 0) {\n        newVolume = 0;\n      } else if (newVolume > 1) {\n        newVolume = 1;\n      }\n\n      _this.setVolume(newVolume);\n    }, _this.fullscreen = function () {\n      if (!_this.state.isFullscreen) {\n        _this._player.node[_requestFullscreen2.default]();\n      } else {\n        document[_exitFullscreen2.default]();\n      }\n    }, _this._handleFullscreenChange = function (_ref2) {\n      var target = _ref2.target;\n\n      if (target === _this._player.node) {\n        _this.setState({\n          isFullscreen: !_this.state.isFullscreen\n        });\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Media, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        media: this._getPublicMediaProps(),\n        _mediaSetters: {\n          setPlayer: this._setPlayer,\n          setPlayerProps: this._setPlayerProps,\n          setPlayerState: this._setPlayerState\n        },\n        _mediaGetters: {\n          getPlayerEvents: this._getPlayerEvents()\n        }\n      };\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._isMounted = true;\n      (0, _fullscreenChange2.default)('add', this._handleFullscreenChange);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n      (0, _fullscreenChange2.default)('remove', this._handleFullscreenChange);\n    }\n  }, {\n    key: '_getPublicMediaProps',\n    value: function _getPublicMediaProps() {\n      return _extends({}, this.state, {\n        play: this.play,\n        pause: this.pause,\n        playPause: this.playPause,\n        stop: this.stop,\n        seekTo: this.seekTo,\n        skipTime: this.skipTime,\n        mute: this.mute,\n        muteUnmute: this.muteUnmute,\n        setVolume: this.setVolume,\n        addVolume: this.addVolume,\n        fullscreen: this.fullscreen\n      });\n    }\n  }, {\n    key: '_getPlayerEvents',\n    value: function _getPlayerEvents() {\n      var _this2 = this;\n\n      var events = {};\n      MEDIA_EVENTS_KEYS.forEach(function (key) {\n        var stateKey = MEDIA_EVENTS[key];\n\n        var handlePropCallback = function handlePropCallback() {\n          var propCallback = _this2._playerProps[key];\n\n          if (typeof propCallback === 'function') {\n            propCallback(_this2.state);\n          }\n        };\n\n        events[key] = function (val) {\n          if (stateKey) {\n            if (_this2._isMounted) {\n              _this2.setState(_defineProperty({}, stateKey, val), handlePropCallback);\n            }\n          } else {\n            handlePropCallback();\n          }\n        };\n      });\n      return events;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var children = this.props.children;\n\n      if (typeof children === 'function') {\n        return children(this._getPublicMediaProps());\n      }\n\n      return _react.Children.only(children);\n    }\n  }]);\n\n  return Media;\n}(_react.Component);\n\nMedia.propTypes = {\n  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]).isRequired\n};\nMedia.childContextTypes = _contextTypes2.default;\nexports.default = Media;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}