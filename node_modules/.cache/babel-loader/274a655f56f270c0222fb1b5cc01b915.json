{"ast":null,"code":"document.addEventListener(\"DOMContentLoaded\", function (event) {\n  console.log(\"are you working\");\n  var music = document.getElementById(\"music\"); // id for audio element\n\n  var duration; // Duration of audio clip\n\n  var pButton = document.getElementById(\"pButton\"); // play button\n\n  var playhead = document.getElementById(\"playhead\"); // playhead\n\n  var timeline = document.getElementById(\"timeline\"); // timeline\n  // timeline width adjusted for playhead\n\n  var timelineWidth = timeline.offsetWidth - playhead.offsetWidth; // play button event listenter\n\n  pButton.addEventListener(\"click\", play); // timeupdate event listener\n\n  music.addEventListener(\"timeupdate\", timeUpdate, false); // makes timeline clickable\n\n  timeline.addEventListener(\"click\", function (event) {\n    moveplayhead(event);\n    music.currentTime = duration * clickPercent(event);\n  }, false); // returns click as decimal (.77) of the total timelineWidth\n\n  function clickPercent(event) {\n    return (event.clientX - getPosition(timeline)) / timelineWidth;\n  } // makes playhead draggable\n\n\n  playhead.addEventListener(\"mousedown\", mouseDown, false);\n  window.addEventListener(\"mouseup\", mouseUp, false); // Boolean value so that audio position is updated only when the playhead is released\n\n  var onplayhead = false; // mouseDown EventListener\n\n  function mouseDown() {\n    onplayhead = true;\n    window.addEventListener(\"mousemove\", moveplayhead, true);\n    music.removeEventListener(\"timeupdate\", timeUpdate, false);\n  } // mouseUp EventListener\n  // getting input from all mouse clicks\n\n\n  function mouseUp(event) {\n    if (onplayhead === true) {\n      moveplayhead(event);\n      window.removeEventListener(\"mousemove\", moveplayhead, true); // change current time\n\n      music.currentTime = duration * clickPercent(event);\n      music.addEventListener(\"timeupdate\", timeUpdate, false);\n    }\n\n    onplayhead = false;\n  } // mousemove EventListener\n  // Moves playhead as user drags\n\n\n  function moveplayhead(event) {\n    var newMargLeft = event.clientX - getPosition(timeline);\n\n    if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n      playhead.style.marginLeft = newMargLeft + \"px\";\n    }\n\n    if (newMargLeft < 0) {\n      playhead.style.marginLeft = \"0px\";\n    }\n\n    if (newMargLeft > timelineWidth) {\n      playhead.style.marginLeft = timelineWidth + \"px\";\n    }\n  } // timeUpdate\n  // Synchronizes playhead position with current point in audio\n\n\n  function timeUpdate() {\n    var playPercent = timelineWidth * (music.currentTime / duration);\n    playhead.style.marginLeft = playPercent + \"px\";\n\n    if (music.currentTime === duration) {\n      pButton.className = \"\";\n      pButton.className = \"play\";\n    }\n  } //Play and Pause\n\n\n  function play() {\n    // start music\n    if (music.paused) {\n      music.play(); // remove play, add pause\n\n      pButton.className = \"\";\n      pButton.className = \"pause\";\n    } else {\n      // pause music\n      music.pause(); // remove pause, add play\n\n      pButton.className = \"\";\n      pButton.className = \"play\";\n    }\n  } // Gets audio file duration\n\n\n  music.addEventListener(\"canplaythrough\", function () {\n    duration = music.duration;\n  }, false); // getPosition\n  // Returns elements left position relative to top-left of viewport\n\n  function getPosition(el) {\n    return el.getBoundingClientRect().left;\n  }\n  /* DOMContentLoaded*/\n\n});","map":{"version":3,"sources":["/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Listen/js/html5audio.js"],"names":["document","addEventListener","event","console","log","music","getElementById","duration","pButton","playhead","timeline","timelineWidth","offsetWidth","play","timeUpdate","moveplayhead","currentTime","clickPercent","clientX","getPosition","mouseDown","window","mouseUp","onplayhead","removeEventListener","newMargLeft","style","marginLeft","playPercent","className","paused","pause","el","getBoundingClientRect","left"],"mappings":"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","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function(event) {\n  console.log(\"are you working\");\n\n  var music = document.getElementById(\"music\"); // id for audio element\n  var duration; // Duration of audio clip\n  var pButton = document.getElementById(\"pButton\"); // play button\n  var playhead = document.getElementById(\"playhead\"); // playhead\n  var timeline = document.getElementById(\"timeline\"); // timeline\n\n  // timeline width adjusted for playhead\n  var timelineWidth = timeline.offsetWidth - playhead.offsetWidth;\n\n  // play button event listenter\n  pButton.addEventListener(\"click\", play);\n\n  // timeupdate event listener\n  music.addEventListener(\"timeupdate\", timeUpdate, false);\n\n  // makes timeline clickable\n  timeline.addEventListener(\n    \"click\",\n    function(event) {\n      moveplayhead(event);\n      music.currentTime = duration * clickPercent(event);\n    },\n    false\n  );\n\n  // returns click as decimal (.77) of the total timelineWidth\n  function clickPercent(event) {\n    return (event.clientX - getPosition(timeline)) / timelineWidth;\n  }\n\n  // makes playhead draggable\n  playhead.addEventListener(\"mousedown\", mouseDown, false);\n  window.addEventListener(\"mouseup\", mouseUp, false);\n\n  // Boolean value so that audio position is updated only when the playhead is released\n  var onplayhead = false;\n\n  // mouseDown EventListener\n  function mouseDown() {\n    onplayhead = true;\n    window.addEventListener(\"mousemove\", moveplayhead, true);\n    music.removeEventListener(\"timeupdate\", timeUpdate, false);\n  }\n\n  // mouseUp EventListener\n  // getting input from all mouse clicks\n  function mouseUp(event) {\n    if (onplayhead === true) {\n      moveplayhead(event);\n      window.removeEventListener(\"mousemove\", moveplayhead, true);\n      // change current time\n      music.currentTime = duration * clickPercent(event);\n      music.addEventListener(\"timeupdate\", timeUpdate, false);\n    }\n    onplayhead = false;\n  }\n  // mousemove EventListener\n  // Moves playhead as user drags\n  function moveplayhead(event) {\n    var newMargLeft = event.clientX - getPosition(timeline);\n\n    if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n      playhead.style.marginLeft = newMargLeft + \"px\";\n    }\n    if (newMargLeft < 0) {\n      playhead.style.marginLeft = \"0px\";\n    }\n    if (newMargLeft > timelineWidth) {\n      playhead.style.marginLeft = timelineWidth + \"px\";\n    }\n  }\n\n  // timeUpdate\n  // Synchronizes playhead position with current point in audio\n  function timeUpdate() {\n    var playPercent = timelineWidth * (music.currentTime / duration);\n    playhead.style.marginLeft = playPercent + \"px\";\n    if (music.currentTime === duration) {\n      pButton.className = \"\";\n      pButton.className = \"play\";\n    }\n  }\n\n  //Play and Pause\n  function play() {\n    // start music\n    if (music.paused) {\n      music.play();\n      // remove play, add pause\n      pButton.className = \"\";\n      pButton.className = \"pause\";\n    } else {\n      // pause music\n      music.pause();\n      // remove pause, add play\n      pButton.className = \"\";\n      pButton.className = \"play\";\n    }\n  }\n\n  // Gets audio file duration\n  music.addEventListener(\n    \"canplaythrough\",\n    function() {\n      duration = music.duration;\n    },\n    false\n  );\n\n  // getPosition\n  // Returns elements left position relative to top-left of viewport\n  function getPosition(el) {\n    return el.getBoundingClientRect().left;\n  }\n\n  /* DOMContentLoaded*/\n});\n"]},"metadata":{},"sourceType":"module"}