{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _soundcloudAudio = require('soundcloud-audio');\n\nvar _soundcloudAudio2 = _interopRequireDefault(_soundcloudAudio);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _Icons = require('./Icons');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar VolumeControl = function (_Component) {\n  _inherits(VolumeControl, _Component);\n\n  function VolumeControl() {\n    _classCallCheck(this, VolumeControl);\n\n    return _possibleConstructorReturn(this, (VolumeControl.__proto__ || Object.getPrototypeOf(VolumeControl)).apply(this, arguments));\n  }\n\n  _createClass(VolumeControl, [{\n    key: 'handleVolumeChange',\n    value: function handleVolumeChange(e) {\n      var _props = this.props,\n          onVolumeChange = _props.onVolumeChange,\n          onToggleMute = _props.onToggleMute,\n          soundCloudAudio = _props.soundCloudAudio,\n          isMuted = _props.isMuted;\n      var xPos = e.target.value / 100;\n      var mute = xPos <= 0 && !isMuted;\n\n      if (soundCloudAudio && !isNaN(soundCloudAudio.audio.volume)) {\n        soundCloudAudio.audio.volume = xPos;\n        soundCloudAudio.audio.muted = mute;\n      }\n\n      if (mute !== isMuted) {\n        onToggleMute && onToggleMute.call(this, mute, e);\n      }\n\n      onVolumeChange && onVolumeChange.call(this, xPos, e);\n    }\n  }, {\n    key: 'handleMute',\n    value: function handleMute(e) {\n      var _props2 = this.props,\n          onToggleMute = _props2.onToggleMute,\n          soundCloudAudio = _props2.soundCloudAudio;\n\n      if (soundCloudAudio && !isNaN(soundCloudAudio.audio.muted)) {\n        soundCloudAudio.audio.muted = !soundCloudAudio.audio.muted;\n      }\n\n      onToggleMute && onToggleMute.call(this, !this.props.isMuted, e);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          className = _props3.className,\n          buttonClassName = _props3.buttonClassName,\n          rangeClassName = _props3.rangeClassName,\n          volume = _props3.volume,\n          isMuted = _props3.isMuted;\n      var value = volume * 100 || 0;\n\n      if (value < 0 || isMuted) {\n        value = 0;\n      }\n\n      if (value > 100) {\n        value = 100;\n      }\n\n      var classNames = (0, _classnames2.default)('sb-soundplayer-volume', className);\n      var buttonClassNames = (0, _classnames2.default)('sb-soundplayer-btn sb-soundplayer-volume-btn', buttonClassName);\n      var rangeClassNames = (0, _classnames2.default)('sb-soundplayer-volume-range', rangeClassName);\n      return _react2.default.createElement('div', {\n        className: classNames\n      }, _react2.default.createElement('button', {\n        className: buttonClassNames,\n        onClick: this.handleMute.bind(this)\n      }, isMuted ? _react2.default.createElement(_Icons.VolumeIconMuteSVG, null) : _react2.default.createElement(_Icons.VolumeIconLoudSVG, null)), _react2.default.createElement('div', null, _react2.default.createElement('input', {\n        className: rangeClassNames,\n        type: 'range',\n        min: '0',\n        max: '100',\n        step: '1',\n        value: value,\n        onChange: this.handleVolumeChange.bind(this)\n      })));\n    }\n  }]);\n\n  return VolumeControl;\n}(_react.Component);\n\nVolumeControl.propTypes = {\n  className: _propTypes2.default.string,\n  buttonClassName: _propTypes2.default.string,\n  rangeClassName: _propTypes2.default.string,\n  volume: _propTypes2.default.number,\n  onVolumeChange: _propTypes2.default.func,\n  onToggleMute: _propTypes2.default.func,\n  soundCloudAudio: _propTypes2.default.instanceOf(_soundcloudAudio2.default)\n};\nVolumeControl.defaultProps = {\n  volume: 1,\n  isMuted: 0\n};\nexports.default = VolumeControl;","map":null,"metadata":{},"sourceType":"script"}