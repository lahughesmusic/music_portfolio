{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.default = withSoundCloudAudio;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _soundcloudAudio = require('soundcloud-audio');\n\nvar _soundcloudAudio2 = _interopRequireDefault(_soundcloudAudio);\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _audioStore = require('../utils/audioStore.js');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nfunction withSoundCloudAudio(WrappedComponent) {\n  var WithSoundCloudAudio = function (_Component) {\n    _inherits(WithSoundCloudAudio, _Component);\n\n    function WithSoundCloudAudio(props, context) {\n      _classCallCheck(this, WithSoundCloudAudio);\n\n      var _this = _possibleConstructorReturn(this, (WithSoundCloudAudio.__proto__ || Object.getPrototypeOf(WithSoundCloudAudio)).call(this, props, context));\n\n      if (!props.clientId && !props.soundCloudAudio && !props.streamUrl) {\n        console.warn('You need to get a clientId from SoundCloud,\\n          pass in an instance of SoundCloudAudio\\n          or use streamUrl with audio source instead\\n          https://github.com/soundblogs/react-soundplayer#examples');\n      } // Don't create a SoundCloudAudio instance\n      // if there is no `window`\n\n\n      if ('undefined' !== typeof window) {\n        if (props.soundCloudAudio) {\n          _this.soundCloudAudio = props.soundCloudAudio;\n        } else {\n          _this.soundCloudAudio = new _soundcloudAudio2.default(props.clientId);\n        }\n      }\n\n      _this.state = {\n        duration: 0,\n        currentTime: 0,\n        seeking: false,\n        playing: false,\n        volume: 1,\n        isMuted: false\n      };\n      return _this;\n    }\n\n    _createClass(WithSoundCloudAudio, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.mounted = true;\n        this.requestAudio();\n        this.listenAudioEvents();\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this.mounted = false;\n        (0, _audioStore.resetPlayedStore)();\n        this.soundCloudAudio.unbindAll();\n      }\n    }, {\n      key: 'requestAudio',\n      value: function requestAudio() {\n        var _this2 = this;\n\n        var soundCloudAudio = this.soundCloudAudio;\n        var _props = this.props,\n            resolveUrl = _props.resolveUrl,\n            streamUrl = _props.streamUrl,\n            preloadType = _props.preloadType,\n            onReady = _props.onReady;\n\n        if (streamUrl) {\n          soundCloudAudio.preload(streamUrl, preloadType);\n        } else if (resolveUrl) {\n          soundCloudAudio.resolve(resolveUrl, function (data) {\n            if (!_this2.mounted) {\n              return;\n            }\n\n            _this2.setState(_defineProperty({}, data.tracks ? 'playlist' : 'track', data), function () {\n              return onReady && onReady();\n            });\n          });\n        }\n      }\n    }, {\n      key: 'listenAudioEvents',\n      value: function listenAudioEvents() {\n        var soundCloudAudio = this.soundCloudAudio; // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events\n\n        soundCloudAudio.on('playing', this.onAudioStarted.bind(this));\n        soundCloudAudio.on('timeupdate', this.getCurrentTime.bind(this));\n        soundCloudAudio.on('loadedmetadata', this.getDuration.bind(this));\n        soundCloudAudio.on('seeking', this.onSeekingTrack.bind(this));\n        soundCloudAudio.on('seeked', this.onSeekedTrack.bind(this));\n        soundCloudAudio.on('pause', this.onAudioPaused.bind(this));\n        soundCloudAudio.on('ended', this.onAudioEnded.bind(this));\n        soundCloudAudio.on('volumechange', this.onVolumeChange.bind(this));\n      }\n    }, {\n      key: 'onSeekingTrack',\n      value: function onSeekingTrack() {\n        this.setState({\n          seeking: true\n        });\n      }\n    }, {\n      key: 'onSeekedTrack',\n      value: function onSeekedTrack() {\n        this.setState({\n          seeking: false\n        });\n      }\n    }, {\n      key: 'onAudioStarted',\n      value: function onAudioStarted() {\n        var soundCloudAudio = this.soundCloudAudio;\n        var onStartTrack = this.props.onStartTrack;\n        this.setState({\n          playing: true\n        });\n        (0, _audioStore.stopAllOther)(soundCloudAudio.playing);\n        (0, _audioStore.addToPlayedStore)(soundCloudAudio);\n        onStartTrack && onStartTrack(soundCloudAudio, soundCloudAudio.playing);\n      }\n    }, {\n      key: 'onAudioPaused',\n      value: function onAudioPaused() {\n        var onPauseTrack = this.props.onPauseTrack;\n        this.setState({\n          playing: false\n        });\n        onPauseTrack && onPauseTrack(this.soundCloudAudio);\n      }\n    }, {\n      key: 'onAudioEnded',\n      value: function onAudioEnded() {\n        var onStopTrack = this.props.onStopTrack;\n        this.setState({\n          playing: false\n        });\n        onStopTrack && onStopTrack(this.soundCloudAudio);\n      }\n    }, {\n      key: 'onVolumeChange',\n      value: function onVolumeChange() {\n        this.setState({\n          volume: this.soundCloudAudio.audio.volume,\n          isMuted: this.soundCloudAudio.audio.muted\n        });\n      }\n    }, {\n      key: 'getCurrentTime',\n      value: function getCurrentTime() {\n        this.setState({\n          currentTime: this.soundCloudAudio.audio.currentTime\n        });\n      }\n    }, {\n      key: 'getDuration',\n      value: function getDuration() {\n        this.setState({\n          duration: this.soundCloudAudio.audio.duration\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {\n          soundCloudAudio: this.soundCloudAudio\n        }, this.state));\n      }\n    }]);\n\n    return WithSoundCloudAudio;\n  }(_react.Component);\n\n  WithSoundCloudAudio.displayName = 'withSoundCloudAudio(' + getDisplayName(WrappedComponent) + ')';\n  WithSoundCloudAudio.WrappedComponent = WrappedComponent;\n  return (0, _hoistNonReactStatics2.default)(WithSoundCloudAudio, WrappedComponent);\n}","map":null,"metadata":{},"sourceType":"script"}