{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _youtubeApiLoader = require('../utils/youtube-api-loader');\n\nvar _youtubeApiLoader2 = _interopRequireDefault(_youtubeApiLoader);\n\nvar _getYoutubeId = require('../utils/get-youtube-id');\n\nvar _getYoutubeId2 = _interopRequireDefault(_getYoutubeId);\n\nvar _vendorPropTypes = require('./vendor-prop-types');\n\nvar _vendorPropTypes2 = _interopRequireDefault(_vendorPropTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Youtube = function (_Component) {\n  _inherits(Youtube, _Component);\n\n  function Youtube() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Youtube);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Youtube.__proto__ || Object.getPrototypeOf(Youtube)).call.apply(_ref, [this].concat(args))), _this), _this._videoId = (0, _getYoutubeId2.default)(_this.props.src), _this._lastVideoId = _this._videoId, _this._isReady = false, _this._isMounted = false, _this._progressId = null, _this._timeUpdateId = null, _this._handleProgress = function () {\n      if (!_this._isMounted) return;\n      var progress = _this._player.getVideoLoadedFraction() || 0;\n\n      _this.props.onProgress(progress);\n\n      if (_this._progressId && progress < 1) {\n        _this._progressId = requestAnimationFrame(_this._handleProgress);\n      }\n    }, _this._handleTimeUpdate = function () {\n      if (!_this._isMounted) return;\n\n      _this.props.onTimeUpdate(_this._player.getCurrentTime() || 0);\n\n      if (_this._timeUpdateId) {\n        _this._timeUpdateId = requestAnimationFrame(_this._handleTimeUpdate);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Youtube, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._isMounted = true;\n\n      _youtubeApiLoader2.default.load(this);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.src !== this.props.src) {\n        this._lastVideoId = this._videoId;\n        this._videoId = (0, _getYoutubeId2.default)(nextProps.src);\n\n        if (this._isReady) {\n          if (nextProps.autoPlay) {\n            this._player.loadVideoById(this._videoId);\n          } else {\n            this._player.cueVideoById(this._videoId);\n          }\n\n          this.props.onReady();\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n\n      if (this._progressId) {\n        cancelAnimationFrame(this._progressId);\n      }\n\n      if (this._timeUpdateId) {\n        cancelAnimationFrame(this._timeUpdateId);\n      }\n\n      if (this._player) {\n        this._player.destroy();\n      }\n    }\n  }, {\n    key: '_createPlayer',\n    value: function _createPlayer() {\n      this._player = new YT.Player(this._node, {\n        videoId: this._videoId,\n        events: this._events(),\n        playerVars: {\n          controls: 0,\n          showinfo: 0,\n          modestbranding: 1\n        }\n      });\n    }\n  }, {\n    key: '_events',\n    value: function _events() {\n      var _this2 = this;\n\n      return {\n        onReady: function onReady() {\n          // if id changed before the player was ready we need to load the new one\n          if (_this2._videoId !== _this2._lastVideoId) {\n            _this2._player.loadVideoById(_this2._videoId);\n          }\n\n          _this2._isReady = true;\n\n          _this2.props.onDuration(_this2._player.getDuration());\n\n          _this2.props.onReady();\n        },\n        onStateChange: function onStateChange(_ref2) {\n          var data = _ref2.data;\n          var _window$YT$PlayerStat = window.YT.PlayerState,\n              PLAYING = _window$YT$PlayerStat.PLAYING,\n              PAUSED = _window$YT$PlayerStat.PAUSED,\n              ENDED = _window$YT$PlayerStat.ENDED,\n              BUFFERING = _window$YT$PlayerStat.BUFFERING,\n              CUED = _window$YT$PlayerStat.CUED;\n          var isPlaying = data === PLAYING;\n\n          if (isPlaying) {\n            _this2.props.onPlay(true);\n\n            _this2.props.isLoading(false);\n\n            _this2.props.onDuration(_this2._player.getDuration());\n\n            _this2._timeUpdateId = requestAnimationFrame(_this2._handleTimeUpdate);\n          } else {\n            cancelAnimationFrame(_this2._timeUpdateId);\n            _this2._timeUpdateId = null;\n            cancelAnimationFrame(_this2._progressId);\n            _this2._progressId = null;\n          }\n\n          if (data === -1 || data === BUFFERING) {\n            _this2.props.isLoading(true);\n          }\n\n          if (data === PAUSED) {\n            _this2.props.onPause(false);\n          }\n\n          if (data === ENDED) {\n            _this2.props.isLoading(false);\n\n            _this2.props.onEnded(false);\n          } // start fetching progress when playing or buffering\n\n\n          if (isPlaying || data === BUFFERING) {\n            _this2._progressId = requestAnimationFrame(_this2._handleProgress);\n          } // reset duration if a new video was loaded\n\n\n          if (data === CUED) {\n            _this2.props.isLoading(false);\n\n            _this2.props.onDuration(0.1);\n          }\n        },\n        onError: function onError(e) {\n          _this2.props.onError(e.data);\n        }\n      };\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n      this._player.playVideo();\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n      this._player.pauseVideo();\n    }\n  }, {\n    key: 'stop',\n    value: function stop() {\n      this._player.stopVideo();\n    }\n  }, {\n    key: 'seekTo',\n    value: function seekTo(currentTime) {\n      this._player.seekTo(currentTime);\n    }\n  }, {\n    key: 'mute',\n    value: function mute(muted) {\n      if (muted) {\n        this._player.mute();\n      } else {\n        this._player.unMute();\n      }\n\n      this.props.onMute(muted);\n      this.props.onVolumeChange(muted ? 0 : 1);\n    }\n  }, {\n    key: 'setVolume',\n    value: function setVolume(volume) {\n      this._player.setVolume(+volume * 100);\n\n      this.props.onVolumeChange(+volume);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      return _react2.default.createElement('div', _extends({\n        ref: function ref(c) {\n          return _this3._node = c;\n        }\n      }, this.props.extraProps));\n    }\n  }, {\n    key: 'instance',\n    get: function get() {\n      return this._player;\n    }\n  }, {\n    key: 'node',\n    get: function get() {\n      return this._player.getIframe();\n    }\n  }]);\n\n  return Youtube;\n}(_react.Component);\n\nYoutube.propTypes = _vendorPropTypes2.default;\nexports.default = Youtube;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}