{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar style = {\n  audioPlayerWrapper: function audioPlayerWrapper(hidePlayer) {\n    return {\n      display: hidePlayer ? 'none' : 'block'\n    };\n  },\n  flexWrapper: {\n    boxSizing: 'border-box',\n    height: '70px',\n    display: 'flex',\n    justifyContent: 'space-between',\n    width: '100%',\n    padding: '15px 0',\n    backgroundColor: 'white',\n    position: 'relative',\n    zIndex: '100',\n    boxShadow: '0 0 3px 0 rgba(0, 0, 0, 0.2)'\n  },\n  pause: {\n    boxSizing: 'content-box',\n    display: 'block',\n    width: '14px',\n    height: '18px',\n    borderLeft: '7px solid white',\n    position: 'relative',\n    zIndex: '1',\n    left: '9px',\n    backgroundColor: 'white',\n    boxShadow: 'inset 7px 0 0 0 rgb(251, 86, 21)'\n  },\n  play: {\n    boxSizing: 'content-box',\n    display: 'block',\n    width: '0',\n    height: '0',\n    borderTop: '10px solid transparent',\n    borderBottom: '10px solid transparent',\n    borderLeft: '20px solid white',\n    position: 'relative',\n    zIndex: '1',\n    left: '13px'\n  },\n  togglePlayWrapper: {\n    boxSizing: 'border-box',\n    flex: '1 0 60px',\n    position: 'relative'\n  },\n  togglePlay: {\n    boxSizing: 'border-box',\n    position: 'absolute',\n    left: '50%',\n    marginLeft: '-20px',\n    backgroundColor: '#FB5615',\n    color: 'white',\n    width: '40px',\n    height: '40px',\n    borderRadius: '50%',\n    textAlign: 'center',\n    paddingTop: '10px'\n  },\n  progressBarWrapper: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    boxSizing: 'border-box',\n    position: 'relative',\n    flex: '10 0 auto',\n    alignSelf: 'center',\n    padding: '5px 4% 0 0'\n  },\n  progressBar: {\n    boxSizing: 'border-box',\n    width: '100%',\n    height: '5px',\n    left: '0',\n    background: '#e4e4e4'\n  },\n  drag: function drag(left) {\n    return {\n      boxSizing: 'border-box',\n      position: 'absolute',\n      width: '20px',\n      height: '20px',\n      left: left,\n      top: '-3px',\n      background: 'skyblue',\n      opacity: '0.8',\n      borderRadius: '50px',\n      boxShadow: '#fff 0 0 5px',\n      cursor: 'pointer'\n    };\n  },\n  audioInfo: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  time: {},\n  volumeControl: {\n    zIndex: 20,\n    cursor: 'pointer',\n    position: 'relative',\n    width: 0,\n    height: 0,\n    borderBottom: '15px solid rgb(228, 228, 228)',\n    borderLeft: '45px solid transparent'\n  },\n  volume: function volume(currentVolume) {\n    var height = 15;\n    return {\n      zIndex: 19,\n      position: 'absolute',\n      left: '-45px',\n      bottom: '-15px',\n      width: 0,\n      height: 0,\n      borderBottom: \"\".concat(height * currentVolume, \"px solid skyblue\"),\n      borderLeft: \"\".concat(height * currentVolume * 3, \"px solid transparent\")\n    };\n  }\n};\n\nvar H5AudioPlayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(H5AudioPlayer, _Component);\n\n  function H5AudioPlayer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, H5AudioPlayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(H5AudioPlayer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      duration: 0,\n      currentTime: 0,\n      currentVolume: _this.props.volume,\n      dragLeft: 0,\n      isDragging: false,\n      isPlaying: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateDisplayTime\", function (dragLeft) {\n      var currentTime = _this.audio.currentTime;\n      var duration = _this.audio.duration;\n      var barWidth = _this.bar.offsetWidth - 20;\n      var left = dragLeft || barWidth * currentTime / duration || 0;\n\n      _this.setState({\n        currentTime: currentTime,\n        duration: duration,\n        barWidth: barWidth,\n        dragLeft: left\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"togglePlay\", function () {\n      if (_this.audio.paused && _this.audio.src) {\n        _this.audio.play();\n      } else if (!_this.audio.paused) {\n        _this.audio.pause();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"volumnControlDrag\", function (e) {\n      if (e.clientX < 0) return;\n\n      var relativePos = e.clientX - _this.volumeControl.getBoundingClientRect().left;\n\n      var currentVolume;\n\n      if (relativePos < 0) {\n        currentVolume = 0;\n      } else if (relativePos > 45) {\n        currentVolume = 1;\n      } else {\n        currentVolume = relativePos / 45;\n      }\n\n      e.currentTarget.style.cursor = 'pointer';\n\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'move';\n      }\n\n      _this.audio.volume = currentVolume;\n\n      _this.setState({\n        currentVolume: currentVolume\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"volumnControlDragOver\", function (e) {\n      e.dataTransfer.dropEffect = 'move';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"volumnControlDragStart\", function (e) {\n      // e.target.style.cursor = 'pointer'\n      e.dataTransfer.setData('text', 'volume');\n      e.dataTransfer.effectAllowed = 'move';\n\n      if (e.dataTransfer.setDragImage) {\n        var crt = e.target.cloneNode(true);\n        e.dataTransfer.setDragImage(crt, 0, 0);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseDownProgressBar\", function (e) {\n      var _assertThisInitialize = _assertThisInitialized(_this),\n          audio = _assertThisInitialize.audio,\n          bar = _assertThisInitialize.bar;\n\n      var mousePageX = e.pageX;\n\n      if (mousePageX) {\n        var dragLeft = mousePageX - bar.getBoundingClientRect().left;\n\n        if (dragLeft < 0) {\n          dragLeft = 0;\n        } else if (dragLeft > bar.offsetWidth - 20) {\n          dragLeft = bar.offsetWidth - 21;\n        }\n\n        audio.currentTime = audio.duration * dragLeft / (bar.offsetWidth - 20) || 0;\n\n        _this.updateDisplayTime(dragLeft);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setListenTrack\", function () {\n      if (!_this.listenTracker) {\n        var listenInterval = _this.props.listenInterval;\n        _this.listenTracker = setInterval(function () {\n          _this.props.onListen && _this.props.onListen(_this.audio.currentTime);\n        }, listenInterval);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearListenTrack\", function () {\n      if (_this.listenTracker) {\n        clearInterval(_this.listenTracker);\n        _this.listenTracker = null;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(H5AudioPlayer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this; // audio player object\n\n\n      var audio = this.audio; // progress bar slider object\n\n      var slider = this.slider;\n      this.intervalId = setInterval(function () {\n        if (!_this2.audio.paused && !_this2.state.isDragging && !!_this2.audio.duration) {\n          _this2.updateDisplayTime();\n        }\n      }, this.props.progressUpdateInterval);\n      audio.addEventListener('error', function (e) {\n        _this2.props.onError && _this2.props.onError(e);\n      }); // When enough of the file has downloaded to start playing\n\n      audio.addEventListener('canplay', function (e) {\n        _this2.props.onCanPlay && _this2.props.onCanPlay(e);\n      }); // When enough of the file has downloaded to play the entire file\n\n      audio.addEventListener('canplaythrough', function (e) {\n        _this2.props.onCanPlayThrough && _this2.props.onCanPlayThrough(e);\n      }); // When audio play starts\n\n      audio.addEventListener('play', function (e) {\n        _this2.setState({\n          isPlaying: true\n        });\n\n        _this2.setListenTrack();\n\n        _this2.props.onPlay && _this2.props.onPlay(e);\n      }); // When unloading the audio player (switching to another src)\n\n      audio.addEventListener('abort', function (e) {\n        _this2.clearListenTrack();\n\n        _this2.props.onAbort && _this2.props.onAbort(e);\n      }); // When the file has finished playing to the end\n\n      audio.addEventListener('ended', function (e) {\n        _this2.clearListenTrack();\n\n        _this2.props.onEnded && _this2.props.onEnded(e);\n      }); // When the user pauses playback\n\n      audio.addEventListener('pause', function (e) {\n        _this2.clearListenTrack();\n\n        if (!_this2.audio) return;\n\n        _this2.setState({\n          isPlaying: false\n        });\n\n        _this2.props.onPause && _this2.props.onPause(e);\n      });\n      var dragX;\n      slider.addEventListener('dragstart', function (e) {\n        if (!_this2.audio.src) {\n          return;\n        }\n\n        e.dataTransfer.setData('text', 'slider');\n\n        if (e.dataTransfer.setDragImage) {\n          var crt = slider.cloneNode(true);\n          e.dataTransfer.setDragImage(crt, 0, 0);\n        }\n\n        _this2.audio.pause();\n\n        document.addEventListener('dragover', function (event) {\n          event = event || window.event;\n          dragX = event.pageX;\n        });\n        _this2.props.onDragStart && _this2.props.onDragStart(e);\n\n        _this2.setState({\n          isDragging: true\n        });\n      });\n      slider.addEventListener('touchstart', function (e) {\n        _this2.setState({\n          isDragging: true\n        });\n\n        _this2.props.onDragStart && _this2.props.onDragStart(e);\n        setTimeout(function () {\n          return _this2.audio.pause();\n        }, 0);\n      });\n      slider.addEventListener('drag', function (e) {\n        if (!_this2.audio.src) {\n          return;\n        }\n\n        if (dragX) {\n          var dragLeft = dragX - _this2.bar.getBoundingClientRect().left;\n\n          if (dragLeft < 0) {\n            dragLeft = 0;\n          } else if (dragLeft > _this2.bar.offsetWidth - 20) {\n            dragLeft = _this2.bar.offsetWidth - 21;\n          }\n\n          audio.currentTime = audio.duration * dragLeft / (_this2.bar.offsetWidth - 20) || 0;\n\n          _this2.updateDisplayTime(dragLeft);\n\n          _this2.props.onDragMove && _this2.props.onDragMove(e);\n        }\n      });\n      slider.addEventListener('touchmove', function (e) {\n        var dragLeft = e.touches[0].clientX - _this2.bar.getBoundingClientRect().left;\n\n        if (dragLeft < 0) {\n          dragLeft = 0;\n        } else if (dragLeft > _this2.bar.offsetWidth - 20) {\n          dragLeft = _this2.bar.offsetWidth - 21;\n        }\n\n        audio.currentTime = audio.duration * dragLeft / (_this2.bar.offsetWidth - 20) || 0;\n\n        _this2.updateDisplayTime(dragLeft);\n\n        _this2.props.onDragMove && _this2.props.onDragMove(e);\n      });\n      slider.addEventListener('dragend', function (e) {\n        if (!_this2.audio.src) {\n          return;\n        }\n\n        var audio = _this2.audio;\n        audio.currentTime = audio.duration * _this2.state.dragLeft / (_this2.bar.offsetWidth - 20) || 0;\n        audio.play();\n\n        _this2.setState({\n          isDragging: false\n        });\n\n        _this2.props.onDragEnd && _this2.props.onDragEnd(e);\n      });\n      slider.addEventListener('touchend', function (e) {\n        _this2.setState({\n          isDragging: false\n        });\n\n        _this2.props.onDragEnd && _this2.props.onDragEnd(e);\n        setTimeout(function () {\n          var audio = _this2.audio;\n          audio.currentTime = audio.duration * _this2.state.dragLeft / (_this2.bar.offsetWidth - 20);\n          audio.play();\n        }, 0);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalId);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var src = this.props.src;\n\n      if (src !== prevProps.src) {\n        this.audio.play();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          volume = _this$props.volume,\n          children = _this$props.children,\n          hidePlayer = _this$props.hidePlayer,\n          src = _this$props.src,\n          preload = _this$props.preload,\n          autoPlay = _this$props.autoPlay,\n          _this$props$title = _this$props.title,\n          title = _this$props$title === void 0 ? src : _this$props$title,\n          mute = _this$props.mute,\n          loop = _this$props.loop;\n      var _this$state = this.state,\n          currentTime = _this$state.currentTime,\n          currentVolume = _this$state.currentVolume,\n          duration = _this$state.duration,\n          isPlaying = _this$state.isPlaying,\n          dragLeft = _this$state.dragLeft;\n\n      var incompatibilityMessage = children || _react[\"default\"].createElement(\"p\", null, \"Your browser does not support the \", _react[\"default\"].createElement(\"code\", null, \"audio\"), \" element.\");\n\n      var currentTimeMin = Math.floor(currentTime / 60);\n      var currentTimeSec = Math.floor(currentTime % 60);\n      var durationMin = Math.floor(duration / 60);\n      var durationSec = Math.floor(duration % 60);\n\n      var addHeadingZero = function addHeadingZero(num) {\n        return num > 9 ? num.toString() : \"0\".concat(num);\n      };\n\n      currentTimeMin = addHeadingZero(currentTimeMin);\n      currentTimeSec = addHeadingZero(currentTimeSec);\n      durationMin = addHeadingZero(durationMin);\n      durationSec = addHeadingZero(durationSec);\n      return _react[\"default\"].createElement(\"div\", {\n        style: style.audioPlayerWrapper(hidePlayer),\n        className: \"react-h5-audio-player \".concat(className)\n      }, _react[\"default\"].createElement(\"div\", {\n        style: style.flexWrapper,\n        className: \"flex\"\n      }, _react[\"default\"].createElement(\"audio\", {\n        src: src,\n        controls: false,\n        title: title,\n        mute: mute,\n        loop: loop,\n        volume: volume,\n        autoPlay: autoPlay,\n        preload: preload,\n        ref: function ref(_ref) {\n          _this3.audio = _ref;\n        }\n      }, incompatibilityMessage), _react[\"default\"].createElement(\"div\", {\n        className: \"toggle-play-wrapper\",\n        style: style.togglePlayWrapper\n      }, _react[\"default\"].createElement(\"a\", {\n        className: \"toggle-play-button\",\n        onClick: function onClick(e) {\n          return _this3.togglePlay(e);\n        },\n        style: style.togglePlay\n      }, isPlaying ? _react[\"default\"].createElement(\"i\", {\n        className: \"pause-icon\",\n        style: style.pause\n      }) : _react[\"default\"].createElement(\"i\", {\n        className: \"play-icon\",\n        style: style.play\n      }))), _react[\"default\"].createElement(\"div\", {\n        className: \"progress-bar-wrapper\",\n        style: style.progressBarWrapper\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"progress-bar\",\n        ref: function ref(_ref2) {\n          _this3.bar = _ref2;\n        },\n        style: style.progressBar,\n        onMouseDown: this.mouseDownProgressBar\n      }), _react[\"default\"].createElement(\"div\", {\n        className: \"sought\"\n      }), _react[\"default\"].createElement(\"div\", {\n        className: \"indicator\",\n        draggable: \"true\",\n        ref: function ref(_ref3) {\n          _this3.slider = _ref3;\n        },\n        style: style.drag(dragLeft)\n      }), _react[\"default\"].createElement(\"div\", {\n        className: \"audio-info\",\n        style: style.audioInfo\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"time\",\n        style: style.time\n      }, _react[\"default\"].createElement(\"span\", {\n        className: \"current-time\"\n      }, currentTimeMin, \":\", currentTimeSec), \"/\", _react[\"default\"].createElement(\"span\", {\n        className: \"total-time\"\n      }, durationMin, \":\", durationSec)), _react[\"default\"].createElement(\"div\", {\n        ref: function ref(_ref4) {\n          _this3.volumeControl = _ref4;\n        },\n        draggable: \"true\",\n        onDragStart: this.volumnControlDragStart,\n        onDrag: this.volumnControlDrag,\n        onDragOver: this.volumnControlDragOver,\n        onMouseDown: this.volumnControlDrag,\n        className: \"volume-controls\",\n        style: style.volumeControl\n      }, _react[\"default\"].createElement(\"div\", {\n        className: \"volumn\",\n        style: style.volume(currentVolume)\n      }))))));\n    }\n  }]);\n\n  return H5AudioPlayer;\n}(_react.Component);\n\n_defineProperty(H5AudioPlayer, \"propTypes\", {\n  /**\r\n   * HTML5 Audio tag autoPlay property\r\n   */\n  autoPlay: _propTypes[\"default\"].bool,\n\n  /**\r\n   * Display message when browser doesn't support\r\n   */\n  children: _propTypes[\"default\"].element,\n\n  /**\r\n   * custom classNames\r\n   */\n  className: _propTypes[\"default\"].string,\n\n  /**\r\n   * Set component `display` to none\r\n   */\n  hidePlayer: _propTypes[\"default\"].bool,\n\n  /**\r\n   * The time interval to trigger onListen\r\n   */\n  listenInterval: _propTypes[\"default\"].number,\n  loop: _propTypes[\"default\"].bool,\n  muted: _propTypes[\"default\"].bool,\n  onAbort: _propTypes[\"default\"].func,\n  onCanPlay: _propTypes[\"default\"].func,\n  onCanPlayThrough: _propTypes[\"default\"].func,\n  onEnded: _propTypes[\"default\"].func,\n  onError: _propTypes[\"default\"].func,\n  onListen: _propTypes[\"default\"].func,\n  onPause: _propTypes[\"default\"].func,\n  onPlay: _propTypes[\"default\"].func,\n  onDragStart: _propTypes[\"default\"].func,\n  onDragMove: _propTypes[\"default\"].func,\n  onDragEnd: _propTypes[\"default\"].func,\n\n  /**\r\n   * HTML5 Audio tag preload property\r\n   */\n  preload: _propTypes[\"default\"].oneOf(['auto', 'metadata', 'none']),\n\n  /**\r\n   * Pregress indicator refresh interval\r\n   */\n  progressUpdateInterval: _propTypes[\"default\"].number,\n\n  /**\r\n   * HTML5 Audio tag src property\r\n   */\n  src: _propTypes[\"default\"].string,\n  title: _propTypes[\"default\"].string,\n  volume: _propTypes[\"default\"].number\n});\n\n_defineProperty(H5AudioPlayer, \"defaultProps\", {\n  autoPlay: false,\n  hidePlayer: false,\n  listenInterval: 1000,\n  loop: false,\n  muted: false,\n  preload: 'auto',\n  progressUpdateInterval: 200,\n  src: '',\n  volume: 1.0\n});\n\nvar _default = H5AudioPlayer;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}