{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _contextTypes = require('./context-types');\n\nvar _contextTypes2 = _interopRequireDefault(_contextTypes);\n\nvar _getVendor2 = require('./utils/get-vendor');\n\nvar _getVendor3 = _interopRequireDefault(_getVendor2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Player = function (_Component) {\n  _inherits(Player, _Component);\n\n  function Player() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Player);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Player.__proto__ || Object.getPrototypeOf(Player)).call.apply(_ref, [this].concat(args))), _this), _this._defaultsSet = false, _this._setPlayer = function (component) {\n      _this.context._mediaSetters.setPlayer(component);\n\n      _this._component = component;\n    }, _this._setLoading = function (isLoading) {\n      _this.context._mediaSetters.setPlayerState({\n        isLoading: isLoading\n      });\n    }, _this._handleOnReady = function () {\n      var _this$context = _this.context,\n          media = _this$context.media,\n          _mediaSetters = _this$context._mediaSetters;\n      var _this$props = _this.props,\n          autoPlay = _this$props.autoPlay,\n          onReady = _this$props.onReady;\n\n      if (!_this._defaultsSet) {\n        _this._setDefaults();\n      } else {\n        media.mute(media.isMuted);\n        media.setVolume(media.volume);\n      }\n\n      if (autoPlay) {\n        media.play();\n      }\n\n      _this._setLoading(false);\n\n      if (typeof onReady === 'function') {\n        onReady(media);\n      }\n    }, _this._handleOnEnded = function () {\n      var _this$context2 = _this.context,\n          media = _this$context2.media,\n          _mediaSetters = _this$context2._mediaSetters;\n      var _this$props2 = _this.props,\n          loop = _this$props2.loop,\n          onEnded = _this$props2.onEnded;\n\n      if (loop) {\n        media.seekTo(0);\n        media.play();\n      } else {\n        _mediaSetters.setPlayerState({\n          isPlaying: false\n        });\n      }\n\n      if (typeof onEnded === 'function') {\n        onEnded(media);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Player, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _props = this.props,\n          defaultCurrentTime = _props.defaultCurrentTime,\n          defaultMuted = _props.defaultMuted,\n          defaultVolume = _props.defaultVolume,\n          restProps = _objectWithoutProperties(_props, ['defaultCurrentTime', 'defaultMuted', 'defaultVolume']);\n\n      this._setPlayerProps(_extends({\n        volume: defaultVolume\n      }, restProps));\n\n      this._setPlayerState({\n        currentTime: defaultCurrentTime,\n        volume: defaultMuted ? 0 : defaultVolume\n      }); // we need to unset the loading state if no source was loaded\n\n\n      if (!this.props.src) {\n        this._setLoading(false);\n      }\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps) {\n      this._setPlayerProps(nextProps); // clean state if the media source has changed\n\n\n      if (this.props.src !== nextProps.src) {\n        this._setPlayerState({\n          currentTime: 0,\n          progress: 0,\n          duration: 0,\n          isLoading: true,\n          isPlaying: false\n        });\n      }\n    }\n  }, {\n    key: '_setPlayerProps',\n    value: function _setPlayerProps(props) {\n      this.context._mediaSetters.setPlayerProps(props);\n    }\n  }, {\n    key: '_setPlayerState',\n    value: function _setPlayerState(state) {\n      this.context._mediaSetters.setPlayerState(state);\n    }\n  }, {\n    key: '_setDefaults',\n    value: function _setDefaults() {\n      var media = this.context.media;\n      var _props2 = this.props,\n          defaultCurrentTime = _props2.defaultCurrentTime,\n          defaultVolume = _props2.defaultVolume,\n          defaultMuted = _props2.defaultMuted;\n\n      if (defaultCurrentTime > 0) {\n        media.seekTo(defaultCurrentTime);\n      }\n\n      if (defaultMuted) {\n        media.mute(defaultMuted);\n      } else if (defaultVolume !== 1) {\n        media.setVolume(defaultVolume);\n      }\n\n      this._defaultsSet = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          src = _props3.src,\n          _vendor = _props3.vendor,\n          autoPlay = _props3.autoPlay,\n          onReady = _props3.onReady,\n          onEnded = _props3.onEnded,\n          defaultCurrentTime = _props3.defaultCurrentTime,\n          defaultVolume = _props3.defaultVolume,\n          defaultMuted = _props3.defaultMuted,\n          extraProps = _objectWithoutProperties(_props3, ['src', 'vendor', 'autoPlay', 'onReady', 'onEnded', 'defaultCurrentTime', 'defaultVolume', 'defaultMuted']);\n\n      var _getVendor = (0, _getVendor3.default)(src, _vendor),\n          vendor = _getVendor.vendor,\n          component = _getVendor.component;\n\n      return (0, _react.createElement)(component, _extends({\n        src: src,\n        vendor: vendor,\n        autoPlay: autoPlay,\n        extraProps: extraProps,\n        ref: this._setPlayer,\n        isLoading: this._setLoading,\n        onReady: this._handleOnReady,\n        onEnded: this._handleOnEnded\n      }, this.context._mediaGetters.getPlayerEvents));\n    }\n  }, {\n    key: 'instance',\n    get: function get() {\n      return this._component && this._component.instance;\n    }\n  }]);\n\n  return Player;\n}(_react.Component);\n\nPlayer.propTypes = {\n  vendor: _propTypes2.default.oneOf(['video', 'audio', 'youtube', 'vimeo']),\n  defaultCurrentTime: _propTypes2.default.number,\n  defaultVolume: _propTypes2.default.number,\n  defaultMuted: _propTypes2.default.bool\n};\nPlayer.defaultProps = {\n  defaultCurrentTime: 0,\n  defaultVolume: 1,\n  defaultMuted: false\n};\nPlayer.contextTypes = _contextTypes2.default;\nexports.default = Player;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}