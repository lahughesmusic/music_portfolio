{"ast":null,"code":"var _jsxFileName = \"/Users/leahughes/Desktop/react_polaris/src/components/Listen/Listen.js\";\nimport React, { Component } from \"react\";\nimport Marquee from \"./listenComponents/Marquee\";\nimport Mp3Button from \"./listenComponents/Mp3Button\"; // import AudioPlayer from \"./listenComponents/Audioplayer\";\n\nimport \"./functions.js\";\nimport \"./listen.css\";\n\nclass AudioPlayer extends Component {\n  render() {\n    return React.createElement(\"audio\", {\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: this.props.audiopath,\n      type: \"audio/mpeg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default class Listen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mp3path: \"./audio/\",\n      mp3name: \"?\",\n      mp3artist: \"Lea Hughes\",\n      audiopath: \"\",\n      mp3autoplay: \"autoPlay\",\n      mp3genre: \"\",\n      soundwaveCssClass: \"soundwave-hidden\",\n      currentButtonId: 0,\n      clickedButtonId: \"\",\n      mp3Data: [],\n      restartTimer: \"no\"\n    };\n  }\n\n  componentWillMount() {\n    var mp3title = this.state.mp3name;\n    mp3title = mp3title.replace(\".mp3\", \"\");\n    this.changeMP3 = this.changeMP3.bind(this);\n    this.setState(state => ({\n      mp3title: mp3title,\n      audiopath: state.mp3path + state.mp3name,\n      mp3Data: [{\n        name: \"?.mp3\",\n        artist: \"Lea Hughes\",\n        genre: \"ambient\"\n      }, {\n        name: \"6_29_16.mp3\",\n        artist: \"Lea Hughes\",\n        genre: \"ambient\"\n      }, {\n        name: \"6_16_2015.mp3\",\n        artist: \"Lea Hughes\",\n        genre: \"ambient\"\n      }]\n    }));\n  }\n\n  changeMP3(currentButtonId, genre, name, artist) {\n    var mp3title = name;\n    var mp3name = name;\n    mp3title = mp3title.replace(\".mp3\", \"\").replaceAll(\"_\", \" \").toUpperCase();\n    this.setState(state => ({\n      audiopath: state.mp3path + mp3name,\n      mp3title: mp3title,\n      mp3artist: artist,\n      mp3genre: genre,\n      soundwaveCssClass: \"soundwave\",\n      currentButtonId: currentButtonId,\n      clickedButtonId: currentButtonId\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"audio-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.title), React.createElement(Marquee, {\n      mp3artist: this.state.mp3artist,\n      mp3genre: this.state.mp3genre,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.mp3title), React.createElement(\"section\", {\n      className: \"mp3list-buttons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.mp3Data.map((mp3, index) => React.createElement(Mp3Button, {\n      key: index,\n      changeMP3: this.changeMP3,\n      clickedButtonId: this.state.mp3name,\n      mp3: mp3.name,\n      artist: mp3.artist,\n      genre: mp3.genre,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))), React.createElement(AudioPlayer, {\n      audiopath: this.state.audiopath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/leahughes/Desktop/react_polaris/src/components/Listen/Listen.js"],"names":["React","Component","Marquee","Mp3Button","AudioPlayer","render","props","audiopath","Listen","constructor","state","mp3path","mp3name","mp3artist","mp3autoplay","mp3genre","soundwaveCssClass","currentButtonId","clickedButtonId","mp3Data","restartTimer","componentWillMount","mp3title","replace","changeMP3","bind","setState","name","artist","genre","replaceAll","toUpperCase","title","map","mp3","index"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Marquee from \"./listenComponents/Marquee\";\nimport Mp3Button from \"./listenComponents/Mp3Button\";\n// import AudioPlayer from \"./listenComponents/Audioplayer\";\nimport \"./functions.js\";\nimport \"./listen.css\";\n\nclass AudioPlayer extends Component {\n  render() {\n    return (\n      <audio controls>\n        <source src={this.props.audiopath} type=\"audio/mpeg\" />\n      </audio>\n    );\n  }\n}\n\nexport default class Listen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mp3path: \"./audio/\",\n      mp3name: \"?\",\n      mp3artist: \"Lea Hughes\",\n      audiopath: \"\",\n      mp3autoplay: \"autoPlay\",\n      mp3genre: \"\",\n      soundwaveCssClass: \"soundwave-hidden\",\n      currentButtonId: 0,\n      clickedButtonId: \"\",\n      mp3Data: [],\n      restartTimer: \"no\"\n    };\n  }\n\n  componentWillMount() {\n    var mp3title = this.state.mp3name;\n    mp3title = mp3title.replace(\".mp3\", \"\");\n    this.changeMP3 = this.changeMP3.bind(this);\n    this.setState(state => ({\n      mp3title: mp3title,\n      audiopath: state.mp3path + state.mp3name,\n      mp3Data: [\n        {\n          name: \"?.mp3\",\n          artist: \"Lea Hughes\",\n          genre: \"ambient\"\n        },\n        {\n          name: \"6_29_16.mp3\",\n          artist: \"Lea Hughes\",\n          genre: \"ambient\"\n        },\n        {\n          name: \"6_16_2015.mp3\",\n          artist: \"Lea Hughes\",\n          genre: \"ambient\"\n        }\n      ]\n    }));\n  }\n  changeMP3(currentButtonId, genre, name, artist) {\n    var mp3title = name;\n    var mp3name = name;\n    mp3title = mp3title\n      .replace(\".mp3\", \"\")\n      .replaceAll(\"_\", \" \")\n      .toUpperCase();\n\n    this.setState(state => ({\n      audiopath: state.mp3path + mp3name,\n      mp3title: mp3title,\n      mp3artist: artist,\n      mp3genre: genre,\n      soundwaveCssClass: \"soundwave\",\n      currentButtonId: currentButtonId,\n      clickedButtonId: currentButtonId\n    }));\n  }\n  render() {\n    return (\n      <div className=\"audio-container\">\n        <h1>{this.props.title}</h1>\n        <Marquee\n          mp3artist={this.state.mp3artist}\n          mp3genre={this.state.mp3genre}\n        >\n          {this.state.mp3title}\n        </Marquee>\n        <section className=\"mp3list-buttons\">\n          {this.state.mp3Data.map((mp3, index) => (\n            <Mp3Button\n              key={index}\n              changeMP3={this.changeMP3}\n              clickedButtonId={this.state.mp3name}\n              mp3={mp3.name}\n              artist={mp3.artist}\n              genre={mp3.genre}\n            />\n          ))}\n        </section>\n        <AudioPlayer audiopath={this.state.audiopath} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}