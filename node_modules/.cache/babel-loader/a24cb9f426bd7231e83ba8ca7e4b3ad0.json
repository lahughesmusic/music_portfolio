{"ast":null,"code":"var _jsxFileName = \"/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Media/react-audio-player/js/components/AudioPlayer.js\";\n\nvar React = require(\"react/addons\");\n\nvar ButtonPanel = require(\"./ButtonPanel\");\n\nvar ProgressBar = require(\"./ProgressBar\");\n\nvar VolumeBar = require(\"./VolumeBar\");\n\nvar TimeLabel = require(\"./TimeLabel\");\n\nvar NameLabel = require(\"./NameLabel\");\n\nvar SongList = require(\"./SongList\");\n\nvar SongFormatterMixin = require(\"./../mixins/SongFormatterMixin\");\n\nvar Howl = require(\"howler\").Howl;\n\nmodule.exports = React.createClass({\n  displayName: \"exports\",\n  mixins: [SongFormatterMixin],\n  getDefaultProps: function () {\n    return {\n      songs: []\n    };\n  },\n  getInitialState: function () {\n    return {\n      isPlaying: false,\n      isPause: false,\n      isLoading: false,\n      currentSongIndex: -1,\n      volume: 0.5\n    };\n  },\n  componentWillMount: function () {\n    if (this.props.dataUrl) {\n      ajax({\n        dataType: \"json\",\n        url: this.props.dataUrl,\n        success: function (response) {\n          this.setState({\n            songs: response.songs,\n            currentSongIndex: 0\n          });\n        }.bind(this)\n      });\n    } else if (this.props.songs) {\n      this.setState({\n        songs: this.props.songs,\n        currentSongIndex: 0\n      });\n    } else {\n      throw \"no data\";\n    }\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    if (this.state.isPlaying && this.state.currentSongIndex != prevState.currentSongIndex) {\n      this.initSoundObject();\n    }\n  },\n  render: function () {\n    var songCount = this.songCount();\n    var percent = 0;\n\n    if (this.state.seek && this.state.duration) {\n      percent = this.state.seek / this.state.duration;\n    }\n\n    var topComponents = [React.createElement(ButtonPanel, {\n      isPlaying: this.state.isPlaying,\n      isPause: this.state.isPause,\n      isLoading: this.state.isLoading,\n      currentSongIndex: this.state.currentSongIndex,\n      songCount: songCount,\n      onPlayBtnClick: this.onPlayBtnClick,\n      onPauseBtnClick: this.onPauseBtnClick,\n      onPrevBtnClick: this.onPrevBtnClick,\n      onNextBtnClick: this.onNextBtnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(ProgressBar, {\n      shorter: songCount > 1,\n      percent: percent,\n      seekTo: this.seekTo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(VolumeBar, {\n      volume: this.state.volume,\n      adjustVolumeTo: this.adjustVolumeTo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })];\n    var songName;\n\n    if (this.songCount() > 1) {\n      topComponents.push(React.createElement(SongList, {\n        ref: \"songList\",\n        className: \"pull-left\",\n        songs: this.state.songs,\n        currentSongIndex: this.state.currentSongIndex,\n        isPlaying: this.state.isPlaying,\n        isPause: this.state.isPause,\n        onSongItemClick: this.onSongItemClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n      songName = this.state.currentSongIndex + 1 + \". \" + this.getCurrentSongName();\n    } else {\n      songName = this.getCurrentSongName();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"audio-player\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"clearfix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, topComponents), React.createElement(\"div\", {\n      className: \"audio-desc-container clearfix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(NameLabel, {\n      name: songName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(TimeLabel, {\n      seek: this.state.seek,\n      duration: this.state.duration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })));\n  },\n  onPlayBtnClick: function () {\n    if (this.state.isPlaying && !this.state.isPause) {\n      return;\n    }\n\n    this.play();\n  },\n  onPauseBtnClick: function () {\n    var isPause = !this.state.isPause;\n    this.setState({\n      isPause: isPause\n    });\n    isPause ? this.pause() : this._play();\n  },\n  onPrevBtnClick: function () {\n    this.prev();\n  },\n  onNextBtnClick: function () {\n    this.next();\n  },\n  onSongItemClick: function (songIndex) {\n    // handle pause/playing state.\n    if (this.state.currentSongIndex == songIndex) {\n      if (this.state.isPause) {\n        this.onPauseBtnClick();\n        this.refs.songList.hideDropdownMenu();\n      } else if (!this.state.isPlaying) {\n        this.onPlayBtnClick();\n        this.refs.songList.hideDropdownMenu();\n      }\n\n      return;\n    } // handle index change state, it must change to play.\n\n\n    this.stop();\n    this.clearSoundObject();\n    this.setState({\n      currentSongIndex: songIndex,\n      duration: 0,\n      isPlaying: true,\n      isPause: false\n    });\n    this.refs.songList.hideDropdownMenu();\n  },\n  play: function () {\n    this.setState({\n      isPlaying: true,\n      isPause: false\n    });\n\n    if (!this.howler) {\n      this.initSoundObject();\n    } else {\n      var songUrl = this.state.songs[this.state.currentSongIndex].url;\n\n      if (songUrl != this.howler._src) {\n        this.initSoundObject();\n      } else {\n        this._play();\n      }\n    }\n  },\n  initSoundObject: function () {\n    this.clearSoundObject();\n    this.setState({\n      isLoading: true\n    });\n    var song = this.state.songs[this.state.currentSongIndex];\n    this.howler = new Howl({\n      src: song.url,\n      volume: this.state.volume,\n      onload: this.initSoundObjectCompleted,\n      onend: this.playEnd\n    });\n  },\n  clearSoundObject: function () {\n    if (this.howler) {\n      this.howler.stop();\n      this.howler = null;\n    }\n  },\n  initSoundObjectCompleted: function () {\n    this._play();\n\n    this.setState({\n      duration: this.howler.duration(),\n      isLoading: false\n    });\n  },\n  _play: function () {\n    this.howler.play();\n    this.stopUpdateCurrentDuration();\n    this.updateCurrentDuration();\n    this.interval = setInterval(this.updateCurrentDuration, 1000);\n  },\n  playEnd: function () {\n    if (this.state.currentSongIndex == this.state.songs.length - 1) {\n      this.stop();\n    } else {\n      this.next();\n    }\n  },\n  stop: function () {\n    this.stopUpdateCurrentDuration();\n    this.setState({\n      seek: 0,\n      isPlaying: false\n    });\n  },\n  pause: function () {\n    this.howler.pause();\n    this.stopUpdateCurrentDuration();\n  },\n  prev: function () {\n    if (this.state.seek > 1 || this.state.currentSongIndex == 0) {\n      this.seekTo(0);\n    } else {\n      this.updateSongIndex(this.state.currentSongIndex - 1);\n    }\n  },\n  next: function () {\n    this.updateSongIndex(this.state.currentSongIndex + 1);\n  },\n  updateSongIndex: function (index) {\n    this.setState({\n      currentSongIndex: index,\n      duration: 0\n    });\n\n    if (this.state.isPause) {\n      this.stop();\n      this.clearSoundObject();\n    } else {\n      this.stopUpdateCurrentDuration();\n    }\n  },\n  updateCurrentDuration: function () {\n    this.setState({\n      seek: this.howler.seek()\n    });\n  },\n  stopUpdateCurrentDuration: function () {\n    clearInterval(this.interval);\n  },\n  seekTo: function (percent) {\n    var seek = this.state.duration * percent;\n    this.howler.seek(seek);\n    this.setState({\n      seek: seek\n    });\n  },\n  adjustVolumeTo: function (percent) {\n    this.setState({\n      volume: percent\n    });\n\n    if (this.howler) {\n      this.howler.volume(percent);\n    }\n  },\n  songCount: function () {\n    return this.state.songs ? this.state.songs.length : 0;\n  },\n  getCurrentSongName: function () {\n    if (this.state.currentSongIndex < 0) {\n      return \"\";\n    }\n\n    var song = this.state.songs[this.state.currentSongIndex];\n    return this.getSongName(song);\n  }\n});","map":{"version":3,"sources":["/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Media/react-audio-player/js/components/AudioPlayer.js"],"names":["React","require","ButtonPanel","ProgressBar","VolumeBar","TimeLabel","NameLabel","SongList","SongFormatterMixin","Howl","module","exports","createClass","mixins","getDefaultProps","songs","getInitialState","isPlaying","isPause","isLoading","currentSongIndex","volume","componentWillMount","props","dataUrl","ajax","dataType","url","success","response","setState","bind","componentDidUpdate","prevProps","prevState","prevContext","state","initSoundObject","render","songCount","percent","seek","duration","topComponents","onPlayBtnClick","onPauseBtnClick","onPrevBtnClick","onNextBtnClick","seekTo","adjustVolumeTo","songName","push","onSongItemClick","getCurrentSongName","play","pause","_play","prev","next","songIndex","refs","songList","hideDropdownMenu","stop","clearSoundObject","howler","songUrl","_src","song","src","onload","initSoundObjectCompleted","onend","playEnd","stopUpdateCurrentDuration","updateCurrentDuration","interval","setInterval","length","updateSongIndex","index","clearInterval","getSongName"],"mappings":"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","sourcesContent":["var React = require(\"react/addons\");\nvar ButtonPanel = require(\"./ButtonPanel\");\nvar ProgressBar = require(\"./ProgressBar\");\nvar VolumeBar = require(\"./VolumeBar\");\nvar TimeLabel = require(\"./TimeLabel\");\nvar NameLabel = require(\"./NameLabel\");\nvar SongList = require(\"./SongList\");\n\nvar SongFormatterMixin = require(\"./../mixins/SongFormatterMixin\");\n\nvar Howl = require(\"howler\").Howl;\n\nmodule.exports = React.createClass({\n  mixins: [SongFormatterMixin],\n\n  getDefaultProps: function() {\n    return { songs: [] };\n  },\n\n  getInitialState: function() {\n    return {\n      isPlaying: false,\n      isPause: false,\n      isLoading: false,\n      currentSongIndex: -1,\n      volume: 0.5\n    };\n  },\n\n  componentWillMount: function() {\n    if (this.props.dataUrl) {\n      ajax({\n        dataType: \"json\",\n        url: this.props.dataUrl,\n        success: function(response) {\n          this.setState({\n            songs: response.songs,\n            currentSongIndex: 0\n          });\n        }.bind(this)\n      });\n    } else if (this.props.songs) {\n      this.setState({\n        songs: this.props.songs,\n        currentSongIndex: 0\n      });\n    } else {\n      throw \"no data\";\n    }\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    if (\n      this.state.isPlaying &&\n      this.state.currentSongIndex != prevState.currentSongIndex\n    ) {\n      this.initSoundObject();\n    }\n  },\n\n  render: function() {\n    var songCount = this.songCount();\n    var percent = 0;\n    if (this.state.seek && this.state.duration) {\n      percent = this.state.seek / this.state.duration;\n    }\n\n    var topComponents = [\n      <ButtonPanel\n        isPlaying={this.state.isPlaying}\n        isPause={this.state.isPause}\n        isLoading={this.state.isLoading}\n        currentSongIndex={this.state.currentSongIndex}\n        songCount={songCount}\n        onPlayBtnClick={this.onPlayBtnClick}\n        onPauseBtnClick={this.onPauseBtnClick}\n        onPrevBtnClick={this.onPrevBtnClick}\n        onNextBtnClick={this.onNextBtnClick}\n      />,\n      <ProgressBar\n        shorter={songCount > 1}\n        percent={percent}\n        seekTo={this.seekTo}\n      />,\n      <VolumeBar\n        volume={this.state.volume}\n        adjustVolumeTo={this.adjustVolumeTo}\n      />\n    ];\n\n    var songName;\n    if (this.songCount() > 1) {\n      topComponents.push(\n        <SongList\n          ref=\"songList\"\n          className=\"pull-left\"\n          songs={this.state.songs}\n          currentSongIndex={this.state.currentSongIndex}\n          isPlaying={this.state.isPlaying}\n          isPause={this.state.isPause}\n          onSongItemClick={this.onSongItemClick}\n        />\n      );\n      songName =\n        this.state.currentSongIndex + 1 + \". \" + this.getCurrentSongName();\n    } else {\n      songName = this.getCurrentSongName();\n    }\n\n    return (\n      <div className=\"audio-player\">\n        <div className=\"clearfix\">{topComponents}</div>\n\n        <div className=\"audio-desc-container clearfix\">\n          <NameLabel name={songName} />\n          <TimeLabel seek={this.state.seek} duration={this.state.duration} />\n        </div>\n      </div>\n    );\n  },\n\n  onPlayBtnClick: function() {\n    if (this.state.isPlaying && !this.state.isPause) {\n      return;\n    }\n    this.play();\n  },\n\n  onPauseBtnClick: function() {\n    var isPause = !this.state.isPause;\n    this.setState({ isPause: isPause });\n    isPause ? this.pause() : this._play();\n  },\n\n  onPrevBtnClick: function() {\n    this.prev();\n  },\n\n  onNextBtnClick: function() {\n    this.next();\n  },\n\n  onSongItemClick: function(songIndex) {\n    // handle pause/playing state.\n    if (this.state.currentSongIndex == songIndex) {\n      if (this.state.isPause) {\n        this.onPauseBtnClick();\n        this.refs.songList.hideDropdownMenu();\n      } else if (!this.state.isPlaying) {\n        this.onPlayBtnClick();\n        this.refs.songList.hideDropdownMenu();\n      }\n      return;\n    }\n\n    // handle index change state, it must change to play.\n    this.stop();\n    this.clearSoundObject();\n    this.setState({\n      currentSongIndex: songIndex,\n      duration: 0,\n      isPlaying: true,\n      isPause: false\n    });\n    this.refs.songList.hideDropdownMenu();\n  },\n\n  play: function() {\n    this.setState({ isPlaying: true, isPause: false });\n\n    if (!this.howler) {\n      this.initSoundObject();\n    } else {\n      var songUrl = this.state.songs[this.state.currentSongIndex].url;\n      if (songUrl != this.howler._src) {\n        this.initSoundObject();\n      } else {\n        this._play();\n      }\n    }\n  },\n\n  initSoundObject: function() {\n    this.clearSoundObject();\n    this.setState({ isLoading: true });\n\n    var song = this.state.songs[this.state.currentSongIndex];\n    this.howler = new Howl({\n      src: song.url,\n      volume: this.state.volume,\n      onload: this.initSoundObjectCompleted,\n      onend: this.playEnd\n    });\n  },\n\n  clearSoundObject: function() {\n    if (this.howler) {\n      this.howler.stop();\n      this.howler = null;\n    }\n  },\n\n  initSoundObjectCompleted: function() {\n    this._play();\n    this.setState({\n      duration: this.howler.duration(),\n      isLoading: false\n    });\n  },\n\n  _play: function() {\n    this.howler.play();\n    this.stopUpdateCurrentDuration();\n    this.updateCurrentDuration();\n    this.interval = setInterval(this.updateCurrentDuration, 1000);\n  },\n\n  playEnd: function() {\n    if (this.state.currentSongIndex == this.state.songs.length - 1) {\n      this.stop();\n    } else {\n      this.next();\n    }\n  },\n\n  stop: function() {\n    this.stopUpdateCurrentDuration();\n    this.setState({ seek: 0, isPlaying: false });\n  },\n\n  pause: function() {\n    this.howler.pause();\n    this.stopUpdateCurrentDuration();\n  },\n\n  prev: function() {\n    if (this.state.seek > 1 || this.state.currentSongIndex == 0) {\n      this.seekTo(0);\n    } else {\n      this.updateSongIndex(this.state.currentSongIndex - 1);\n    }\n  },\n\n  next: function() {\n    this.updateSongIndex(this.state.currentSongIndex + 1);\n  },\n\n  updateSongIndex: function(index) {\n    this.setState({\n      currentSongIndex: index,\n      duration: 0\n    });\n    if (this.state.isPause) {\n      this.stop();\n      this.clearSoundObject();\n    } else {\n      this.stopUpdateCurrentDuration();\n    }\n  },\n\n  updateCurrentDuration: function() {\n    this.setState({ seek: this.howler.seek() });\n  },\n\n  stopUpdateCurrentDuration: function() {\n    clearInterval(this.interval);\n  },\n\n  seekTo: function(percent) {\n    var seek = this.state.duration * percent;\n    this.howler.seek(seek);\n    this.setState({ seek: seek });\n  },\n\n  adjustVolumeTo: function(percent) {\n    this.setState({ volume: percent });\n    if (this.howler) {\n      this.howler.volume(percent);\n    }\n  },\n\n  songCount: function() {\n    return this.state.songs ? this.state.songs.length : 0;\n  },\n\n  getCurrentSongName: function() {\n    if (this.state.currentSongIndex < 0) {\n      return \"\";\n    }\n    var song = this.state.songs[this.state.currentSongIndex];\n    return this.getSongName(song);\n  }\n});\n"]},"metadata":{},"sourceType":"module"}