{"ast":null,"code":"document.addEventListener(\"DOMContentLoaded\", function (event) {\n  var music = document.getElementById('music'); // id for audio element\n\n  var duration; // Duration of audio clip\n\n  var pButton = document.getElementById('pButton'); // play button\n\n  var playhead = document.getElementById('playhead'); // playhead\n\n  var timeline = document.getElementById('timeline'); // timeline\n  // timeline width adjusted for playhead\n\n  var timelineWidth = timeline.offsetWidth - playhead.offsetWidth; // play button event listenter\n\n  pButton.addEventListener(\"click\", play); // timeupdate event listener\n\n  music.addEventListener(\"timeupdate\", timeUpdate, false); // makes timeline clickable\n\n  timeline.addEventListener(\"click\", function (event) {\n    moveplayhead(event);\n    music.currentTime = duration * clickPercent(event);\n  }, false); // returns click as decimal (.77) of the total timelineWidth\n\n  function clickPercent(event) {\n    return (event.clientX - getPosition(timeline)) / timelineWidth;\n  } // makes playhead draggable\n\n\n  playhead.addEventListener('mousedown', mouseDown, false);\n  window.addEventListener('mouseup', mouseUp, false); // Boolean value so that audio position is updated only when the playhead is released\n\n  var onplayhead = false; // mouseDown EventListener\n\n  function mouseDown() {\n    onplayhead = true;\n    window.addEventListener('mousemove', moveplayhead, true);\n    music.removeEventListener('timeupdate', timeUpdate, false);\n  } // mouseUp EventListener\n  // getting input from all mouse clicks\n\n\n  function mouseUp(event) {\n    if (onplayhead == true) {\n      moveplayhead(event);\n      window.removeEventListener('mousemove', moveplayhead, true); // change current time\n\n      music.currentTime = duration * clickPercent(event);\n      music.addEventListener('timeupdate', timeUpdate, false);\n    }\n\n    onplayhead = false;\n  } // mousemove EventListener\n  // Moves playhead as user drags\n\n\n  function moveplayhead(event) {\n    var newMargLeft = event.clientX - getPosition(timeline);\n\n    if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n      playhead.style.marginLeft = newMargLeft + \"px\";\n    }\n\n    if (newMargLeft < 0) {\n      playhead.style.marginLeft = \"0px\";\n    }\n\n    if (newMargLeft > timelineWidth) {\n      playhead.style.marginLeft = timelineWidth + \"px\";\n    }\n  } // timeUpdate\n  // Synchronizes playhead position with current point in audio\n\n\n  function timeUpdate() {\n    var playPercent = timelineWidth * (music.currentTime / duration);\n    playhead.style.marginLeft = playPercent + \"px\";\n\n    if (music.currentTime == duration) {\n      pButton.className = \"\";\n      pButton.className = \"play\";\n    }\n  } //Play and Pause\n\n\n  function play() {\n    // start music\n    if (music.paused) {\n      music.play(); // remove play, add pause\n\n      pButton.className = \"\";\n      pButton.className = \"pause\";\n    } else {\n      // pause music\n      music.pause(); // remove pause, add play\n\n      pButton.className = \"\";\n      pButton.className = \"play\";\n    }\n  } // Gets audio file duration\n\n\n  music.addEventListener(\"canplaythrough\", function () {\n    duration = music.duration;\n  }, false); // getPosition\n  // Returns elements left position relative to top-left of viewport\n\n  function getPosition(el) {\n    return el.getBoundingClientRect().left;\n  }\n  /* DOMContentLoaded*/\n\n});","map":{"version":3,"sources":["/Users/leahughes/Desktop/react_polaris/react_polaris/src/components/Listen/js/html5audio.js"],"names":["document","addEventListener","event","music","getElementById","duration","pButton","playhead","timeline","timelineWidth","offsetWidth","play","timeUpdate","moveplayhead","currentTime","clickPercent","clientX","getPosition","mouseDown","window","mouseUp","onplayhead","removeEventListener","newMargLeft","style","marginLeft","playPercent","className","paused","pause","el","getBoundingClientRect","left"],"mappings":"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","sourcesContent":["document.addEventListener(\"DOMContentLoaded\", function(event) {\n\nvar music = document.getElementById('music'); // id for audio element\nvar duration; // Duration of audio clip\nvar pButton = document.getElementById('pButton'); // play button\nvar playhead = document.getElementById('playhead'); // playhead\nvar timeline = document.getElementById('timeline'); // timeline\n\n// timeline width adjusted for playhead\nvar timelineWidth = timeline.offsetWidth - playhead.offsetWidth;\n\n// play button event listenter\npButton.addEventListener(\"click\", play);\n\n// timeupdate event listener\nmusic.addEventListener(\"timeupdate\", timeUpdate, false);\n\n// makes timeline clickable\ntimeline.addEventListener(\"click\", function(event) {\n    moveplayhead(event);\n    music.currentTime = duration * clickPercent(event);\n}, false);\n\n// returns click as decimal (.77) of the total timelineWidth\nfunction clickPercent(event) {\n    return (event.clientX - getPosition(timeline)) / timelineWidth;\n\n}\n\n// makes playhead draggable\nplayhead.addEventListener('mousedown', mouseDown, false);\nwindow.addEventListener('mouseup', mouseUp, false);\n\n// Boolean value so that audio position is updated only when the playhead is released\nvar onplayhead = false;\n\n// mouseDown EventListener\nfunction mouseDown() {\n    onplayhead = true;\n    window.addEventListener('mousemove', moveplayhead, true);\n    music.removeEventListener('timeupdate', timeUpdate, false);\n}\n\n// mouseUp EventListener\n// getting input from all mouse clicks\nfunction mouseUp(event) {\n    if (onplayhead == true) {\n        moveplayhead(event);\n        window.removeEventListener('mousemove', moveplayhead, true);\n        // change current time\n        music.currentTime = duration * clickPercent(event);\n        music.addEventListener('timeupdate', timeUpdate, false);\n    }\n    onplayhead = false;\n}\n// mousemove EventListener\n// Moves playhead as user drags\nfunction moveplayhead(event) {\n    var newMargLeft = event.clientX - getPosition(timeline);\n\n    if (newMargLeft >= 0 && newMargLeft <= timelineWidth) {\n        playhead.style.marginLeft = newMargLeft + \"px\";\n    }\n    if (newMargLeft < 0) {\n        playhead.style.marginLeft = \"0px\";\n    }\n    if (newMargLeft > timelineWidth) {\n        playhead.style.marginLeft = timelineWidth + \"px\";\n    }\n}\n\n// timeUpdate\n// Synchronizes playhead position with current point in audio\nfunction timeUpdate() {\n    var playPercent = timelineWidth * (music.currentTime / duration);\n    playhead.style.marginLeft = playPercent + \"px\";\n    if (music.currentTime == duration) {\n        pButton.className = \"\";\n        pButton.className = \"play\";\n    }\n}\n\n//Play and Pause\nfunction play() {\n    // start music\n    if (music.paused) {\n        music.play();\n        // remove play, add pause\n        pButton.className = \"\";\n        pButton.className = \"pause\";\n    } else { // pause music\n        music.pause();\n        // remove pause, add play\n        pButton.className = \"\";\n        pButton.className = \"play\";\n    }\n}\n\n// Gets audio file duration\nmusic.addEventListener(\"canplaythrough\", function() {\n    duration = music.duration;\n}, false);\n\n// getPosition\n// Returns elements left position relative to top-left of viewport\nfunction getPosition(el) {\n    return el.getBoundingClientRect().left;\n}\n\n/* DOMContentLoaded*/\n});\n"]},"metadata":{},"sourceType":"module"}