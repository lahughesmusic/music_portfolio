{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nvar buildURL = require('./../helpers/buildURL');\n\nvar parseHeaders = require('./../helpers/parseHeaders');\n\nvar transformData = require('./../helpers/transformData');\n\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\n\nvar btoa = window.btoa || require('./../helpers/btoa');\n\nmodule.exports = function xhrAdapter(resolve, reject, config) {\n  var requestData = config.data;\n  var requestHeaders = config.headers;\n\n  if (utils.isFormData(requestData)) {\n    delete requestHeaders['Content-Type']; // Let the browser set it\n  }\n\n  var request = new XMLHttpRequest(); // For IE 8/9 CORS support\n  // Only supports POST and GET calls and doesn't returns the response headers.\n\n  if (window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {\n    request = new window.XDomainRequest();\n  } // HTTP basic authentication\n\n\n  if (config.auth) {\n    var username = config.auth.username || '';\n    var password = config.auth.password || '';\n    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n  }\n\n  request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true); // Set the request timeout in MS\n\n  request.timeout = config.timeout; // Listen for ready state\n\n  request.onload = function handleLoad() {\n    if (!request) {\n      return;\n    } // Prepare the response\n\n\n    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n    var responseData = ['text', ''].indexOf(config.responseType || '') !== -1 ? request.responseText : request.response;\n    var response = {\n      data: transformData(responseData, responseHeaders, config.transformResponse),\n      // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)\n      status: request.status === 1223 ? 204 : request.status,\n      statusText: request.status === 1223 ? 'No Content' : request.statusText,\n      headers: responseHeaders,\n      config: config\n    }; // Resolve or reject the Promise based on the status\n\n    (response.status >= 200 && response.status < 300 || !('status' in request) && response.responseText ? resolve : reject)(response); // Clean up request\n\n    request = null;\n  }; // Handle low level network errors\n\n\n  request.onerror = function handleError() {\n    // Real errors are hidden from us by the browser\n    // onerror should only fire if it's a network error\n    reject(new Error('Network Error')); // Clean up request\n\n    request = null;\n  }; // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n\n  if (utils.isStandardBrowserEnv()) {\n    var cookies = require('./../helpers/cookies'); // Add xsrf header\n\n\n    var xsrfValue = config.withCredentials || isURLSameOrigin(config.url) ? cookies.read(config.xsrfCookieName) : undefined;\n\n    if (xsrfValue) {\n      requestHeaders[config.xsrfHeaderName] = xsrfValue;\n    }\n  } // Add headers to the request\n\n\n  if ('setRequestHeader' in request) {\n    utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n      if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n        // Remove Content-Type if data is undefined\n        delete requestHeaders[key];\n      } else {\n        // Otherwise add header to the request\n        request.setRequestHeader(key, val);\n      }\n    });\n  } // Add withCredentials to request if needed\n\n\n  if (config.withCredentials) {\n    request.withCredentials = true;\n  } // Add responseType to request if needed\n\n\n  if (config.responseType) {\n    try {\n      request.responseType = config.responseType;\n    } catch (e) {\n      if (request.responseType !== 'json') {\n        throw e;\n      }\n    }\n  }\n\n  if (utils.isArrayBuffer(requestData)) {\n    requestData = new DataView(requestData);\n  } // Send the request\n\n\n  request.send(requestData);\n};","map":null,"metadata":{},"sourceType":"script"}